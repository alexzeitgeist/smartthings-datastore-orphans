-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Global.types.TestGlobalBitmap
--- @alias TestGlobalBitmap
---
--- @field public FIRST_BIT number 1
--- @field public SECOND_BIT number 2

local TestGlobalBitmap = {}
local new_mt = UintABC.new_mt({NAME = "TestGlobalBitmap", ID = data_types.name_to_id_map["Uint32"]}, 4)

TestGlobalBitmap.BASE_MASK = 0xFFFF
TestGlobalBitmap.FIRST_BIT = 0x0001
TestGlobalBitmap.SECOND_BIT = 0x0002

TestGlobalBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  FIRST_BIT = 0x0001,
  SECOND_BIT = 0x0002,
}

--- @function TestGlobalBitmap:is_first_bit_set
--- @return boolean True if the value of FIRST_BIT is non-zero
TestGlobalBitmap.is_first_bit_set = function(self)
  return (self.value & self.FIRST_BIT) ~= 0
end

--- @function TestGlobalBitmap:set_first_bit
--- Set the value of the bit in the FIRST_BIT field to 1
TestGlobalBitmap.set_first_bit = function(self)
  if self.value ~= nil then
    self.value = self.value | self.FIRST_BIT
  else
    self.value = self.FIRST_BIT
  end
end

--- @function TestGlobalBitmap:unset_first_bit
--- Set the value of the bits in the FIRST_BIT field to 0
TestGlobalBitmap.unset_first_bit = function(self)
  self.value = self.value & (~self.FIRST_BIT & self.BASE_MASK)
end
--- @function TestGlobalBitmap:is_second_bit_set
--- @return boolean True if the value of SECOND_BIT is non-zero
TestGlobalBitmap.is_second_bit_set = function(self)
  return (self.value & self.SECOND_BIT) ~= 0
end

--- @function TestGlobalBitmap:set_second_bit
--- Set the value of the bit in the SECOND_BIT field to 1
TestGlobalBitmap.set_second_bit = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SECOND_BIT
  else
    self.value = self.SECOND_BIT
  end
end

--- @function TestGlobalBitmap:unset_second_bit
--- Set the value of the bits in the SECOND_BIT field to 0
TestGlobalBitmap.unset_second_bit = function(self)
  self.value = self.value & (~self.SECOND_BIT & self.BASE_MASK)
end


TestGlobalBitmap.mask_methods = {
  is_first_bit_set = TestGlobalBitmap.is_first_bit_set,
  set_first_bit = TestGlobalBitmap.set_first_bit,
  unset_first_bit = TestGlobalBitmap.unset_first_bit,
  is_second_bit_set = TestGlobalBitmap.is_second_bit_set,
  set_second_bit = TestGlobalBitmap.set_second_bit,
  unset_second_bit = TestGlobalBitmap.unset_second_bit,
}

TestGlobalBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(TestGlobalBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Global.types.TestGlobalBitmap")
if has_aliases then
  aliases:add_to_class(TestGlobalBitmap)
end

return TestGlobalBitmap


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Global.types.MeasurementUnitEnum: st.matter.data_types.Uint8
--- @alias MeasurementUnitEnum
---
--- @field public byte_length number 1
--- @field public PPM number 0
--- @field public PPB number 1
--- @field public PPT number 2
--- @field public MGM3 number 3
--- @field public UGM3 number 4
--- @field public NGM3 number 5
--- @field public PM3 number 6
--- @field public BQM3 number 7

local MeasurementUnitEnum = {}
local new_mt = UintABC.new_mt({NAME = "MeasurementUnitEnum", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.PPM] = "PPM",
    [self.PPB] = "PPB",
    [self.PPT] = "PPT",
    [self.MGM3] = "MGM3",
    [self.UGM3] = "UGM3",
    [self.NGM3] = "NGM3",
    [self.PM3] = "PM3",
    [self.BQM3] = "BQM3",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.PPM  = 0x00
new_mt.__index.PPB  = 0x01
new_mt.__index.PPT  = 0x02
new_mt.__index.MGM3  = 0x03
new_mt.__index.UGM3  = 0x04
new_mt.__index.NGM3  = 0x05
new_mt.__index.PM3  = 0x06
new_mt.__index.BQM3  = 0x07

MeasurementUnitEnum.PPM  = 0x00
MeasurementUnitEnum.PPB  = 0x01
MeasurementUnitEnum.PPT  = 0x02
MeasurementUnitEnum.MGM3  = 0x03
MeasurementUnitEnum.UGM3  = 0x04
MeasurementUnitEnum.NGM3  = 0x05
MeasurementUnitEnum.PM3  = 0x06
MeasurementUnitEnum.BQM3  = 0x07

MeasurementUnitEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(MeasurementUnitEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Global.types.MeasurementUnitEnum")
if has_aliases then
  aliases:add_to_class(MeasurementUnitEnum)
end

return MeasurementUnitEnum


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Global.types.WebRTCMetadataOptions
--- @alias WebRTCMetadataOptions
---
--- @field public DATATLV number 1

local WebRTCMetadataOptions = {}
local new_mt = UintABC.new_mt({NAME = "WebRTCMetadataOptions", ID = data_types.name_to_id_map["Uint8"]}, 1)

WebRTCMetadataOptions.BASE_MASK = 0xFFFF
WebRTCMetadataOptions.DATATLV = 0x0001

WebRTCMetadataOptions.mask_fields = {
  BASE_MASK = 0xFFFF,
  DATATLV = 0x0001,
}

--- @function WebRTCMetadataOptions:is_datatlv_set
--- @return boolean True if the value of DATATLV is non-zero
WebRTCMetadataOptions.is_datatlv_set = function(self)
  return (self.value & self.DATATLV) ~= 0
end

--- @function WebRTCMetadataOptions:set_datatlv
--- Set the value of the bit in the DATATLV field to 1
WebRTCMetadataOptions.set_datatlv = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DATATLV
  else
    self.value = self.DATATLV
  end
end

--- @function WebRTCMetadataOptions:unset_datatlv
--- Set the value of the bits in the DATATLV field to 0
WebRTCMetadataOptions.unset_datatlv = function(self)
  self.value = self.value & (~self.DATATLV & self.BASE_MASK)
end


WebRTCMetadataOptions.mask_methods = {
  is_datatlv_set = WebRTCMetadataOptions.is_datatlv_set,
  set_datatlv = WebRTCMetadataOptions.set_datatlv,
  unset_datatlv = WebRTCMetadataOptions.unset_datatlv,
}

WebRTCMetadataOptions.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(WebRTCMetadataOptions, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Global.types.WebRTCMetadataOptions")
if has_aliases then
  aliases:add_to_class(WebRTCMetadataOptions)
end

return WebRTCMetadataOptions


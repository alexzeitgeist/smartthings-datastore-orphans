-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Global.types.WebRTCEndReasonEnum: st.matter.data_types.Uint8
--- @alias WebRTCEndReasonEnum
---
--- @field public byte_length number 1
--- @field public ICE_FAILED number 0
--- @field public ICE_TIMEOUT number 1
--- @field public USER_HANGUP number 2
--- @field public USER_BUSY number 3
--- @field public REPLACED number 4
--- @field public NO_USER_MEDIA number 5
--- @field public INVITE_TIMEOUT number 6
--- @field public ANSWERED_ELSEWHERE number 7
--- @field public OUT_OF_RESOURCES number 8
--- @field public MEDIA_TIMEOUT number 9
--- @field public LOW_POWER number 10
--- @field public UNKNOWN_REASON number 11

local WebRTCEndReasonEnum = {}
local new_mt = UintABC.new_mt({NAME = "WebRTCEndReasonEnum", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.ICE_FAILED] = "ICE_FAILED",
    [self.ICE_TIMEOUT] = "ICE_TIMEOUT",
    [self.USER_HANGUP] = "USER_HANGUP",
    [self.USER_BUSY] = "USER_BUSY",
    [self.REPLACED] = "REPLACED",
    [self.NO_USER_MEDIA] = "NO_USER_MEDIA",
    [self.INVITE_TIMEOUT] = "INVITE_TIMEOUT",
    [self.ANSWERED_ELSEWHERE] = "ANSWERED_ELSEWHERE",
    [self.OUT_OF_RESOURCES] = "OUT_OF_RESOURCES",
    [self.MEDIA_TIMEOUT] = "MEDIA_TIMEOUT",
    [self.LOW_POWER] = "LOW_POWER",
    [self.UNKNOWN_REASON] = "UNKNOWN_REASON",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.ICE_FAILED  = 0x00
new_mt.__index.ICE_TIMEOUT  = 0x01
new_mt.__index.USER_HANGUP  = 0x02
new_mt.__index.USER_BUSY  = 0x03
new_mt.__index.REPLACED  = 0x04
new_mt.__index.NO_USER_MEDIA  = 0x05
new_mt.__index.INVITE_TIMEOUT  = 0x06
new_mt.__index.ANSWERED_ELSEWHERE  = 0x07
new_mt.__index.OUT_OF_RESOURCES  = 0x08
new_mt.__index.MEDIA_TIMEOUT  = 0x09
new_mt.__index.LOW_POWER  = 0x0A
new_mt.__index.UNKNOWN_REASON  = 0x0B

WebRTCEndReasonEnum.ICE_FAILED  = 0x00
WebRTCEndReasonEnum.ICE_TIMEOUT  = 0x01
WebRTCEndReasonEnum.USER_HANGUP  = 0x02
WebRTCEndReasonEnum.USER_BUSY  = 0x03
WebRTCEndReasonEnum.REPLACED  = 0x04
WebRTCEndReasonEnum.NO_USER_MEDIA  = 0x05
WebRTCEndReasonEnum.INVITE_TIMEOUT  = 0x06
WebRTCEndReasonEnum.ANSWERED_ELSEWHERE  = 0x07
WebRTCEndReasonEnum.OUT_OF_RESOURCES  = 0x08
WebRTCEndReasonEnum.MEDIA_TIMEOUT  = 0x09
WebRTCEndReasonEnum.LOW_POWER  = 0x0A
WebRTCEndReasonEnum.UNKNOWN_REASON  = 0x0B

WebRTCEndReasonEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(WebRTCEndReasonEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Global.types.WebRTCEndReasonEnum")
if has_aliases then
  aliases:add_to_class(WebRTCEndReasonEnum)
end

return WebRTCEndReasonEnum



-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Global.types.PositionTag: st.matter.data_types.Uint8
--- @alias PositionTag
---
--- @field public byte_length number 1
--- @field public LEFT number 0
--- @field public RIGHT number 1
--- @field public TOP number 2
--- @field public BOTTOM number 3
--- @field public MIDDLE number 4
--- @field public ROW number 5
--- @field public COLUMN number 6

local PositionTag = {}
local new_mt = UintABC.new_mt({NAME = "PositionTag", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.LEFT] = "LEFT",
    [self.RIGHT] = "RIGHT",
    [self.TOP] = "TOP",
    [self.BOTTOM] = "BOTTOM",
    [self.MIDDLE] = "MIDDLE",
    [self.ROW] = "ROW",
    [self.COLUMN] = "COLUMN",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.LEFT  = 0x00
new_mt.__index.RIGHT  = 0x01
new_mt.__index.TOP  = 0x02
new_mt.__index.BOTTOM  = 0x03
new_mt.__index.MIDDLE  = 0x04
new_mt.__index.ROW  = 0x05
new_mt.__index.COLUMN  = 0x06

PositionTag.LEFT  = 0x00
PositionTag.RIGHT  = 0x01
PositionTag.TOP  = 0x02
PositionTag.BOTTOM  = 0x03
PositionTag.MIDDLE  = 0x04
PositionTag.ROW  = 0x05
PositionTag.COLUMN  = 0x06

PositionTag.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(PositionTag, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Global.types.PositionTag")
if has_aliases then
  aliases:add_to_class(PositionTag)
end

return PositionTag


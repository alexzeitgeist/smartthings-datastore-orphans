-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Global.types.MeasurementTypeEnum: st.matter.data_types.Uint16
--- @alias MeasurementTypeEnum
---
--- @field public byte_length number 2
--- @field public UNSPECIFIED number 0
--- @field public VOLTAGE number 1
--- @field public ACTIVE_CURRENT number 2
--- @field public REACTIVE_CURRENT number 3
--- @field public APPARENT_CURRENT number 4
--- @field public ACTIVE_POWER number 5
--- @field public REACTIVE_POWER number 6
--- @field public APPARENT_POWER number 7
--- @field public RMS_VOLTAGE number 8
--- @field public RMS_CURRENT number 9
--- @field public RMS_POWER number 10
--- @field public FREQUENCY number 11
--- @field public POWER_FACTOR number 12
--- @field public NEUTRAL_CURRENT number 13
--- @field public ELECTRICAL_ENERGY number 14

local MeasurementTypeEnum = {}
local new_mt = UintABC.new_mt({NAME = "MeasurementTypeEnum", ID = data_types.name_to_id_map["Uint16"]}, 2)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.UNSPECIFIED] = "UNSPECIFIED",
    [self.VOLTAGE] = "VOLTAGE",
    [self.ACTIVE_CURRENT] = "ACTIVE_CURRENT",
    [self.REACTIVE_CURRENT] = "REACTIVE_CURRENT",
    [self.APPARENT_CURRENT] = "APPARENT_CURRENT",
    [self.ACTIVE_POWER] = "ACTIVE_POWER",
    [self.REACTIVE_POWER] = "REACTIVE_POWER",
    [self.APPARENT_POWER] = "APPARENT_POWER",
    [self.RMS_VOLTAGE] = "RMS_VOLTAGE",
    [self.RMS_CURRENT] = "RMS_CURRENT",
    [self.RMS_POWER] = "RMS_POWER",
    [self.FREQUENCY] = "FREQUENCY",
    [self.POWER_FACTOR] = "POWER_FACTOR",
    [self.NEUTRAL_CURRENT] = "NEUTRAL_CURRENT",
    [self.ELECTRICAL_ENERGY] = "ELECTRICAL_ENERGY",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.UNSPECIFIED  = 0x00
new_mt.__index.VOLTAGE  = 0x01
new_mt.__index.ACTIVE_CURRENT  = 0x02
new_mt.__index.REACTIVE_CURRENT  = 0x03
new_mt.__index.APPARENT_CURRENT  = 0x04
new_mt.__index.ACTIVE_POWER  = 0x05
new_mt.__index.REACTIVE_POWER  = 0x06
new_mt.__index.APPARENT_POWER  = 0x07
new_mt.__index.RMS_VOLTAGE  = 0x08
new_mt.__index.RMS_CURRENT  = 0x09
new_mt.__index.RMS_POWER  = 0x0A
new_mt.__index.FREQUENCY  = 0x0B
new_mt.__index.POWER_FACTOR  = 0x0C
new_mt.__index.NEUTRAL_CURRENT  = 0x0D
new_mt.__index.ELECTRICAL_ENERGY  = 0x0E

MeasurementTypeEnum.UNSPECIFIED  = 0x00
MeasurementTypeEnum.VOLTAGE  = 0x01
MeasurementTypeEnum.ACTIVE_CURRENT  = 0x02
MeasurementTypeEnum.REACTIVE_CURRENT  = 0x03
MeasurementTypeEnum.APPARENT_CURRENT  = 0x04
MeasurementTypeEnum.ACTIVE_POWER  = 0x05
MeasurementTypeEnum.REACTIVE_POWER  = 0x06
MeasurementTypeEnum.APPARENT_POWER  = 0x07
MeasurementTypeEnum.RMS_VOLTAGE  = 0x08
MeasurementTypeEnum.RMS_CURRENT  = 0x09
MeasurementTypeEnum.RMS_POWER  = 0x0A
MeasurementTypeEnum.FREQUENCY  = 0x0B
MeasurementTypeEnum.POWER_FACTOR  = 0x0C
MeasurementTypeEnum.NEUTRAL_CURRENT  = 0x0D
MeasurementTypeEnum.ELECTRICAL_ENERGY  = 0x0E

MeasurementTypeEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(MeasurementTypeEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Global.types.MeasurementTypeEnum")
if has_aliases then
  aliases:add_to_class(MeasurementTypeEnum)
end

return MeasurementTypeEnum


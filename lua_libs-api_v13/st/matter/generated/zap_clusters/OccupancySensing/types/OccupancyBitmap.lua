-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.OccupancySensing.types.OccupancyBitmap
--- @alias OccupancyBitmap
---
--- @field public OCCUPIED number 1

local OccupancyBitmap = {}
local new_mt = UintABC.new_mt({NAME = "OccupancyBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

OccupancyBitmap.BASE_MASK = 0xFFFF
OccupancyBitmap.OCCUPIED = 0x0001

OccupancyBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  OCCUPIED = 0x0001,
}

--- @function OccupancyBitmap:is_occupied_set
--- @return boolean True if the value of OCCUPIED is non-zero
OccupancyBitmap.is_occupied_set = function(self)
  return (self.value & self.OCCUPIED) ~= 0
end

--- @function OccupancyBitmap:set_occupied
--- Set the value of the bit in the OCCUPIED field to 1
OccupancyBitmap.set_occupied = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OCCUPIED
  else
    self.value = self.OCCUPIED
  end
end

--- @function OccupancyBitmap:unset_occupied
--- Set the value of the bits in the OCCUPIED field to 0
OccupancyBitmap.unset_occupied = function(self)
  self.value = self.value & (~self.OCCUPIED & self.BASE_MASK)
end


OccupancyBitmap.mask_methods = {
  is_occupied_set = OccupancyBitmap.is_occupied_set,
  set_occupied = OccupancyBitmap.set_occupied,
  unset_occupied = OccupancyBitmap.unset_occupied,
}

OccupancyBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(OccupancyBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.OccupancySensing.types.OccupancyBitmap")
if has_aliases then
  aliases:add_to_class(OccupancyBitmap)
end

return OccupancyBitmap


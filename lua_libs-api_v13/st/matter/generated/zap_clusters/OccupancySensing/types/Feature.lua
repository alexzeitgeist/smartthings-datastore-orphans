-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.OccupancySensing.types.Feature
--- @alias Feature
---
--- @field public OTHER number 1
--- @field public PASSIVE_INFRARED number 2
--- @field public ULTRASONIC number 4
--- @field public PHYSICAL_CONTACT number 8
--- @field public ACTIVE_INFRARED number 16
--- @field public RADAR number 32
--- @field public RF_SENSING number 64
--- @field public VISION number 128

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.OTHER = 0x0001
Feature.PASSIVE_INFRARED = 0x0002
Feature.ULTRASONIC = 0x0004
Feature.PHYSICAL_CONTACT = 0x0008
Feature.ACTIVE_INFRARED = 0x0010
Feature.RADAR = 0x0020
Feature.RF_SENSING = 0x0040
Feature.VISION = 0x0080

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  OTHER = 0x0001,
  PASSIVE_INFRARED = 0x0002,
  ULTRASONIC = 0x0004,
  PHYSICAL_CONTACT = 0x0008,
  ACTIVE_INFRARED = 0x0010,
  RADAR = 0x0020,
  RF_SENSING = 0x0040,
  VISION = 0x0080,
}

--- @function Feature:is_other_set
--- @return boolean True if the value of OTHER is non-zero
Feature.is_other_set = function(self)
  return (self.value & self.OTHER) ~= 0
end

--- @function Feature:set_other
--- Set the value of the bit in the OTHER field to 1
Feature.set_other = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OTHER
  else
    self.value = self.OTHER
  end
end

--- @function Feature:unset_other
--- Set the value of the bits in the OTHER field to 0
Feature.unset_other = function(self)
  self.value = self.value & (~self.OTHER & self.BASE_MASK)
end
--- @function Feature:is_passive_infrared_set
--- @return boolean True if the value of PASSIVE_INFRARED is non-zero
Feature.is_passive_infrared_set = function(self)
  return (self.value & self.PASSIVE_INFRARED) ~= 0
end

--- @function Feature:set_passive_infrared
--- Set the value of the bit in the PASSIVE_INFRARED field to 1
Feature.set_passive_infrared = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PASSIVE_INFRARED
  else
    self.value = self.PASSIVE_INFRARED
  end
end

--- @function Feature:unset_passive_infrared
--- Set the value of the bits in the PASSIVE_INFRARED field to 0
Feature.unset_passive_infrared = function(self)
  self.value = self.value & (~self.PASSIVE_INFRARED & self.BASE_MASK)
end
--- @function Feature:is_ultrasonic_set
--- @return boolean True if the value of ULTRASONIC is non-zero
Feature.is_ultrasonic_set = function(self)
  return (self.value & self.ULTRASONIC) ~= 0
end

--- @function Feature:set_ultrasonic
--- Set the value of the bit in the ULTRASONIC field to 1
Feature.set_ultrasonic = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ULTRASONIC
  else
    self.value = self.ULTRASONIC
  end
end

--- @function Feature:unset_ultrasonic
--- Set the value of the bits in the ULTRASONIC field to 0
Feature.unset_ultrasonic = function(self)
  self.value = self.value & (~self.ULTRASONIC & self.BASE_MASK)
end
--- @function Feature:is_physical_contact_set
--- @return boolean True if the value of PHYSICAL_CONTACT is non-zero
Feature.is_physical_contact_set = function(self)
  return (self.value & self.PHYSICAL_CONTACT) ~= 0
end

--- @function Feature:set_physical_contact
--- Set the value of the bit in the PHYSICAL_CONTACT field to 1
Feature.set_physical_contact = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PHYSICAL_CONTACT
  else
    self.value = self.PHYSICAL_CONTACT
  end
end

--- @function Feature:unset_physical_contact
--- Set the value of the bits in the PHYSICAL_CONTACT field to 0
Feature.unset_physical_contact = function(self)
  self.value = self.value & (~self.PHYSICAL_CONTACT & self.BASE_MASK)
end
--- @function Feature:is_active_infrared_set
--- @return boolean True if the value of ACTIVE_INFRARED is non-zero
Feature.is_active_infrared_set = function(self)
  return (self.value & self.ACTIVE_INFRARED) ~= 0
end

--- @function Feature:set_active_infrared
--- Set the value of the bit in the ACTIVE_INFRARED field to 1
Feature.set_active_infrared = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ACTIVE_INFRARED
  else
    self.value = self.ACTIVE_INFRARED
  end
end

--- @function Feature:unset_active_infrared
--- Set the value of the bits in the ACTIVE_INFRARED field to 0
Feature.unset_active_infrared = function(self)
  self.value = self.value & (~self.ACTIVE_INFRARED & self.BASE_MASK)
end
--- @function Feature:is_radar_set
--- @return boolean True if the value of RADAR is non-zero
Feature.is_radar_set = function(self)
  return (self.value & self.RADAR) ~= 0
end

--- @function Feature:set_radar
--- Set the value of the bit in the RADAR field to 1
Feature.set_radar = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RADAR
  else
    self.value = self.RADAR
  end
end

--- @function Feature:unset_radar
--- Set the value of the bits in the RADAR field to 0
Feature.unset_radar = function(self)
  self.value = self.value & (~self.RADAR & self.BASE_MASK)
end
--- @function Feature:is_rf_sensing_set
--- @return boolean True if the value of RF_SENSING is non-zero
Feature.is_rf_sensing_set = function(self)
  return (self.value & self.RF_SENSING) ~= 0
end

--- @function Feature:set_rf_sensing
--- Set the value of the bit in the RF_SENSING field to 1
Feature.set_rf_sensing = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RF_SENSING
  else
    self.value = self.RF_SENSING
  end
end

--- @function Feature:unset_rf_sensing
--- Set the value of the bits in the RF_SENSING field to 0
Feature.unset_rf_sensing = function(self)
  self.value = self.value & (~self.RF_SENSING & self.BASE_MASK)
end
--- @function Feature:is_vision_set
--- @return boolean True if the value of VISION is non-zero
Feature.is_vision_set = function(self)
  return (self.value & self.VISION) ~= 0
end

--- @function Feature:set_vision
--- Set the value of the bit in the VISION field to 1
Feature.set_vision = function(self)
  if self.value ~= nil then
    self.value = self.value | self.VISION
  else
    self.value = self.VISION
  end
end

--- @function Feature:unset_vision
--- Set the value of the bits in the VISION field to 0
Feature.unset_vision = function(self)
  self.value = self.value & (~self.VISION & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.OTHER |
    Feature.PASSIVE_INFRARED |
    Feature.ULTRASONIC |
    Feature.PHYSICAL_CONTACT |
    Feature.ACTIVE_INFRARED |
    Feature.RADAR |
    Feature.RF_SENSING |
    Feature.VISION
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_other_set = Feature.is_other_set,
  set_other = Feature.set_other,
  unset_other = Feature.unset_other,
  is_passive_infrared_set = Feature.is_passive_infrared_set,
  set_passive_infrared = Feature.set_passive_infrared,
  unset_passive_infrared = Feature.unset_passive_infrared,
  is_ultrasonic_set = Feature.is_ultrasonic_set,
  set_ultrasonic = Feature.set_ultrasonic,
  unset_ultrasonic = Feature.unset_ultrasonic,
  is_physical_contact_set = Feature.is_physical_contact_set,
  set_physical_contact = Feature.set_physical_contact,
  unset_physical_contact = Feature.unset_physical_contact,
  is_active_infrared_set = Feature.is_active_infrared_set,
  set_active_infrared = Feature.set_active_infrared,
  unset_active_infrared = Feature.unset_active_infrared,
  is_radar_set = Feature.is_radar_set,
  set_radar = Feature.set_radar,
  unset_radar = Feature.unset_radar,
  is_rf_sensing_set = Feature.is_rf_sensing_set,
  set_rf_sensing = Feature.set_rf_sensing,
  unset_rf_sensing = Feature.unset_rf_sensing,
  is_vision_set = Feature.is_vision_set,
  set_vision = Feature.set_vision,
  unset_vision = Feature.unset_vision,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.OccupancySensing.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


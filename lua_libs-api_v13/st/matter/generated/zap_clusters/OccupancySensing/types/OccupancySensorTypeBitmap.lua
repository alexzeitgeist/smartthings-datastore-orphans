-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.OccupancySensing.types.OccupancySensorTypeBitmap
--- @alias OccupancySensorTypeBitmap
---
--- @field public PIR number 1
--- @field public ULTRASONIC number 2
--- @field public PHYSICAL_CONTACT number 4

local OccupancySensorTypeBitmap = {}
local new_mt = UintABC.new_mt({NAME = "OccupancySensorTypeBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

OccupancySensorTypeBitmap.BASE_MASK = 0xFFFF
OccupancySensorTypeBitmap.PIR = 0x0001
OccupancySensorTypeBitmap.ULTRASONIC = 0x0002
OccupancySensorTypeBitmap.PHYSICAL_CONTACT = 0x0004

OccupancySensorTypeBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  PIR = 0x0001,
  ULTRASONIC = 0x0002,
  PHYSICAL_CONTACT = 0x0004,
}

--- @function OccupancySensorTypeBitmap:is_pir_set
--- @return boolean True if the value of PIR is non-zero
OccupancySensorTypeBitmap.is_pir_set = function(self)
  return (self.value & self.PIR) ~= 0
end

--- @function OccupancySensorTypeBitmap:set_pir
--- Set the value of the bit in the PIR field to 1
OccupancySensorTypeBitmap.set_pir = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PIR
  else
    self.value = self.PIR
  end
end

--- @function OccupancySensorTypeBitmap:unset_pir
--- Set the value of the bits in the PIR field to 0
OccupancySensorTypeBitmap.unset_pir = function(self)
  self.value = self.value & (~self.PIR & self.BASE_MASK)
end
--- @function OccupancySensorTypeBitmap:is_ultrasonic_set
--- @return boolean True if the value of ULTRASONIC is non-zero
OccupancySensorTypeBitmap.is_ultrasonic_set = function(self)
  return (self.value & self.ULTRASONIC) ~= 0
end

--- @function OccupancySensorTypeBitmap:set_ultrasonic
--- Set the value of the bit in the ULTRASONIC field to 1
OccupancySensorTypeBitmap.set_ultrasonic = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ULTRASONIC
  else
    self.value = self.ULTRASONIC
  end
end

--- @function OccupancySensorTypeBitmap:unset_ultrasonic
--- Set the value of the bits in the ULTRASONIC field to 0
OccupancySensorTypeBitmap.unset_ultrasonic = function(self)
  self.value = self.value & (~self.ULTRASONIC & self.BASE_MASK)
end
--- @function OccupancySensorTypeBitmap:is_physical_contact_set
--- @return boolean True if the value of PHYSICAL_CONTACT is non-zero
OccupancySensorTypeBitmap.is_physical_contact_set = function(self)
  return (self.value & self.PHYSICAL_CONTACT) ~= 0
end

--- @function OccupancySensorTypeBitmap:set_physical_contact
--- Set the value of the bit in the PHYSICAL_CONTACT field to 1
OccupancySensorTypeBitmap.set_physical_contact = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PHYSICAL_CONTACT
  else
    self.value = self.PHYSICAL_CONTACT
  end
end

--- @function OccupancySensorTypeBitmap:unset_physical_contact
--- Set the value of the bits in the PHYSICAL_CONTACT field to 0
OccupancySensorTypeBitmap.unset_physical_contact = function(self)
  self.value = self.value & (~self.PHYSICAL_CONTACT & self.BASE_MASK)
end


OccupancySensorTypeBitmap.mask_methods = {
  is_pir_set = OccupancySensorTypeBitmap.is_pir_set,
  set_pir = OccupancySensorTypeBitmap.set_pir,
  unset_pir = OccupancySensorTypeBitmap.unset_pir,
  is_ultrasonic_set = OccupancySensorTypeBitmap.is_ultrasonic_set,
  set_ultrasonic = OccupancySensorTypeBitmap.set_ultrasonic,
  unset_ultrasonic = OccupancySensorTypeBitmap.unset_ultrasonic,
  is_physical_contact_set = OccupancySensorTypeBitmap.is_physical_contact_set,
  set_physical_contact = OccupancySensorTypeBitmap.set_physical_contact,
  unset_physical_contact = OccupancySensorTypeBitmap.unset_physical_contact,
}

OccupancySensorTypeBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(OccupancySensorTypeBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.OccupancySensing.types.OccupancySensorTypeBitmap")
if has_aliases then
  aliases:add_to_class(OccupancySensorTypeBitmap)
end

return OccupancySensorTypeBitmap


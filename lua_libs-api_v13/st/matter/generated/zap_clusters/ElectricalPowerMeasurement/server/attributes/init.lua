-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local attr_mt = {}
attr_mt.__attr_cache = {}
attr_mt.__index = function(self, key)
  if attr_mt.__attr_cache[key] == nil then
    local req_loc = string.format("st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.%s", key)
    local raw_def = require(req_loc)
    local cluster = rawget(self, "_cluster")
    raw_def:set_parent_cluster(cluster)
    attr_mt.__attr_cache[key] = raw_def
  end
  return attr_mt.__attr_cache[key]
end

--- @class st.matter.generated.zap_clusters.ElectricalPowerMeasurementServerAttributes
---
--- @field public PowerMode st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.PowerMode
--- @field public NumberOfMeasurementTypes st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.NumberOfMeasurementTypes
--- @field public Accuracy st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.Accuracy
--- @field public Ranges st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.Ranges
--- @field public Voltage st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.Voltage
--- @field public ActiveCurrent st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.ActiveCurrent
--- @field public ReactiveCurrent st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.ReactiveCurrent
--- @field public ApparentCurrent st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.ApparentCurrent
--- @field public ActivePower st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.ActivePower
--- @field public ReactivePower st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.ReactivePower
--- @field public ApparentPower st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.ApparentPower
--- @field public RMSVoltage st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.RMSVoltage
--- @field public RMSCurrent st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.RMSCurrent
--- @field public RMSPower st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.RMSPower
--- @field public Frequency st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.Frequency
--- @field public HarmonicCurrents st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.HarmonicCurrents
--- @field public HarmonicPhases st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.HarmonicPhases
--- @field public PowerFactor st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.PowerFactor
--- @field public NeutralCurrent st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.NeutralCurrent
--- @field public AcceptedCommandList st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.AcceptedCommandList
--- @field public EventList st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.EventList
--- @field public AttributeList st.matter.generated.zap_clusters.ElectricalPowerMeasurement.server.attributes.AttributeList
local ElectricalPowerMeasurementServerAttributes = {}

function ElectricalPowerMeasurementServerAttributes:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ElectricalPowerMeasurementServerAttributes, attr_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ElectricalPowerMeasurement.server.attributes")
if has_aliases then
  aliases:add_to_class(ElectricalPowerMeasurementServerAttributes)
end

return ElectricalPowerMeasurementServerAttributes


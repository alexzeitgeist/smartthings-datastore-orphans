-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ContentLauncher.types.StatusEnum: st.matter.data_types.Uint8
--- @alias StatusEnum
---
--- @field public byte_length number 1
--- @field public SUCCESS number 0
--- @field public URL_NOT_AVAILABLE number 1
--- @field public AUTH_FAILED number 2
--- @field public TEXT_TRACK_NOT_AVAILABLE number 3
--- @field public AUDIO_TRACK_NOT_AVAILABLE number 4

local StatusEnum = {}
local new_mt = UintABC.new_mt({NAME = "StatusEnum", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.SUCCESS] = "SUCCESS",
    [self.URL_NOT_AVAILABLE] = "URL_NOT_AVAILABLE",
    [self.AUTH_FAILED] = "AUTH_FAILED",
    [self.TEXT_TRACK_NOT_AVAILABLE] = "TEXT_TRACK_NOT_AVAILABLE",
    [self.AUDIO_TRACK_NOT_AVAILABLE] = "AUDIO_TRACK_NOT_AVAILABLE",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.SUCCESS  = 0x00
new_mt.__index.URL_NOT_AVAILABLE  = 0x01
new_mt.__index.AUTH_FAILED  = 0x02
new_mt.__index.TEXT_TRACK_NOT_AVAILABLE  = 0x03
new_mt.__index.AUDIO_TRACK_NOT_AVAILABLE  = 0x04

StatusEnum.SUCCESS  = 0x00
StatusEnum.URL_NOT_AVAILABLE  = 0x01
StatusEnum.AUTH_FAILED  = 0x02
StatusEnum.TEXT_TRACK_NOT_AVAILABLE  = 0x03
StatusEnum.AUDIO_TRACK_NOT_AVAILABLE  = 0x04

StatusEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(StatusEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ContentLauncher.types.StatusEnum")
if has_aliases then
  aliases:add_to_class(StatusEnum)
end

return StatusEnum


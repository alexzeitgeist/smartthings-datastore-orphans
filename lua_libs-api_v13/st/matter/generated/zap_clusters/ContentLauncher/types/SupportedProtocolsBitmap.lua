-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ContentLauncher.types.SupportedProtocolsBitmap
--- @alias SupportedProtocolsBitmap
---
--- @field public DASH number 1
--- @field public HLS number 2

local SupportedProtocolsBitmap = {}
local new_mt = UintABC.new_mt({NAME = "SupportedProtocolsBitmap", ID = data_types.name_to_id_map["Uint32"]}, 4)

SupportedProtocolsBitmap.BASE_MASK = 0xFFFF
SupportedProtocolsBitmap.DASH = 0x0001
SupportedProtocolsBitmap.HLS = 0x0002

SupportedProtocolsBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  DASH = 0x0001,
  HLS = 0x0002,
}

--- @function SupportedProtocolsBitmap:is_dash_set
--- @return boolean True if the value of DASH is non-zero
SupportedProtocolsBitmap.is_dash_set = function(self)
  return (self.value & self.DASH) ~= 0
end

--- @function SupportedProtocolsBitmap:set_dash
--- Set the value of the bit in the DASH field to 1
SupportedProtocolsBitmap.set_dash = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DASH
  else
    self.value = self.DASH
  end
end

--- @function SupportedProtocolsBitmap:unset_dash
--- Set the value of the bits in the DASH field to 0
SupportedProtocolsBitmap.unset_dash = function(self)
  self.value = self.value & (~self.DASH & self.BASE_MASK)
end
--- @function SupportedProtocolsBitmap:is_hls_set
--- @return boolean True if the value of HLS is non-zero
SupportedProtocolsBitmap.is_hls_set = function(self)
  return (self.value & self.HLS) ~= 0
end

--- @function SupportedProtocolsBitmap:set_hls
--- Set the value of the bit in the HLS field to 1
SupportedProtocolsBitmap.set_hls = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HLS
  else
    self.value = self.HLS
  end
end

--- @function SupportedProtocolsBitmap:unset_hls
--- Set the value of the bits in the HLS field to 0
SupportedProtocolsBitmap.unset_hls = function(self)
  self.value = self.value & (~self.HLS & self.BASE_MASK)
end


SupportedProtocolsBitmap.mask_methods = {
  is_dash_set = SupportedProtocolsBitmap.is_dash_set,
  set_dash = SupportedProtocolsBitmap.set_dash,
  unset_dash = SupportedProtocolsBitmap.unset_dash,
  is_hls_set = SupportedProtocolsBitmap.is_hls_set,
  set_hls = SupportedProtocolsBitmap.set_hls,
  unset_hls = SupportedProtocolsBitmap.unset_hls,
}

SupportedProtocolsBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(SupportedProtocolsBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ContentLauncher.types.SupportedProtocolsBitmap")
if has_aliases then
  aliases:add_to_class(SupportedProtocolsBitmap)
end

return SupportedProtocolsBitmap


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local AccountLoginServerAttributes = require "st.matter.generated.zap_clusters.AccountLogin.server.attributes"
local AccountLoginServerCommands = require "st.matter.generated.zap_clusters.AccountLogin.server.commands"
local AccountLoginClientCommands = require "st.matter.generated.zap_clusters.AccountLogin.client.commands"
local AccountLoginEvents = require "st.matter.generated.zap_clusters.AccountLogin.server.events"
local AccountLoginTypes = require "st.matter.generated.zap_clusters.AccountLogin.types"

--- @class st.matter.generated.zap_clusters.AccountLogin
--- @alias AccountLogin
---
--- @field public ID number 0x050E the ID of this cluster
--- @field public NAME string "AccountLogin" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.AccountLoginServerAttributes | st.matter.generated.zap_clusters.AccountLoginClientAttributes
--- @field public commands st.matter.generated.zap_clusters.AccountLoginServerCommands | st.matter.generated.zap_clusters.AccountLoginClientCommands
--- @field public types st.matter.generated.zap_clusters.AccountLoginTypes

local AccountLogin = {}

AccountLogin.ID = 0x050E
AccountLogin.NAME = "AccountLogin"
AccountLogin.server = {}
AccountLogin.client = {}
AccountLogin.server.attributes = AccountLoginServerAttributes:set_parent_cluster(AccountLogin)
AccountLogin.server.commands = AccountLoginServerCommands:set_parent_cluster(AccountLogin)
AccountLogin.client.commands = AccountLoginClientCommands:set_parent_cluster(AccountLogin)
AccountLogin.server.events = AccountLoginEvents:set_parent_cluster(AccountLogin)
AccountLogin.types = AccountLoginTypes

--- Find an attribute by id
---
--- @param attr_id number
function AccountLogin:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function AccountLogin:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "GetSetupPIN",
    [0x0002] = "Login",
    [0x0003] = "Logout",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function AccountLogin:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x0001] = "GetSetupPINResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

--- Find an event by id
---
--- @param event_id number
function AccountLogin:get_event_by_id(event_id)
  local event_id_map = {
    [0x0000] = "LoggedOut",
  }
  if event_id_map[event_id] ~= nil then
    return self.server.events[event_id_map[event_id]]
  end
  return nil
end
-- Attribute Mapping
AccountLogin.attribute_direction_map = {
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.AccountLogin.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      AccountLogin.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
AccountLogin.command_direction_map = {
  ["GetSetupPIN"] = "server",
  ["Login"] = "server",
  ["Logout"] = "server",
  ["GetSetupPINResponse"] = "client",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.AccountLogin.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      AccountLogin.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.AccountLogin.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      AccountLogin.command_direction_map[alias] = "client"
    end
  end
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = AccountLogin.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, AccountLogin.NAME))
  end
  return AccountLogin[direction].attributes[key]
end
AccountLogin.attributes = {}
setmetatable(AccountLogin.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = AccountLogin.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, AccountLogin.NAME))
  end
  return AccountLogin[direction].commands[key]
end
AccountLogin.commands = {}
setmetatable(AccountLogin.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return AccountLogin.server.events[key]
end
AccountLogin.events = {}
setmetatable(AccountLogin.events, event_helper_mt)

setmetatable(AccountLogin, {__index = cluster_base})

return AccountLogin


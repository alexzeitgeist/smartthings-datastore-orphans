-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.LaundryWasherMode.types.ModeTag: st.matter.data_types.Uint16
--- @alias ModeTag
---
--- @field public byte_length number 2
--- @field public AUTO number 0
--- @field public QUICK number 1
--- @field public QUIET number 2
--- @field public LOW_NOISE number 3
--- @field public LOW_ENERGY number 4
--- @field public VACATION number 5
--- @field public MIN number 6
--- @field public MAX number 7
--- @field public NIGHT number 8
--- @field public DAY number 9
--- @field public NORMAL number 16384
--- @field public DELICATE number 16385
--- @field public HEAVY number 16386
--- @field public WHITES number 16387

local ModeTag = {}
local new_mt = UintABC.new_mt({NAME = "ModeTag", ID = data_types.name_to_id_map["Uint16"]}, 2)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.AUTO] = "AUTO",
    [self.QUICK] = "QUICK",
    [self.QUIET] = "QUIET",
    [self.LOW_NOISE] = "LOW_NOISE",
    [self.LOW_ENERGY] = "LOW_ENERGY",
    [self.VACATION] = "VACATION",
    [self.MIN] = "MIN",
    [self.MAX] = "MAX",
    [self.NIGHT] = "NIGHT",
    [self.DAY] = "DAY",
    [self.NORMAL] = "NORMAL",
    [self.DELICATE] = "DELICATE",
    [self.HEAVY] = "HEAVY",
    [self.WHITES] = "WHITES",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.AUTO  = 0x00
new_mt.__index.QUICK  = 0x01
new_mt.__index.QUIET  = 0x02
new_mt.__index.LOW_NOISE  = 0x03
new_mt.__index.LOW_ENERGY  = 0x04
new_mt.__index.VACATION  = 0x05
new_mt.__index.MIN  = 0x06
new_mt.__index.MAX  = 0x07
new_mt.__index.NIGHT  = 0x08
new_mt.__index.DAY  = 0x09
new_mt.__index.NORMAL  = 0x4000
new_mt.__index.DELICATE  = 0x4001
new_mt.__index.HEAVY  = 0x4002
new_mt.__index.WHITES  = 0x4003

ModeTag.AUTO  = 0x00
ModeTag.QUICK  = 0x01
ModeTag.QUIET  = 0x02
ModeTag.LOW_NOISE  = 0x03
ModeTag.LOW_ENERGY  = 0x04
ModeTag.VACATION  = 0x05
ModeTag.MIN  = 0x06
ModeTag.MAX  = 0x07
ModeTag.NIGHT  = 0x08
ModeTag.DAY  = 0x09
ModeTag.NORMAL  = 0x4000
ModeTag.DELICATE  = 0x4001
ModeTag.HEAVY  = 0x4002
ModeTag.WHITES  = 0x4003

ModeTag.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ModeTag, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.LaundryWasherMode.types.ModeTag")
if has_aliases then
  aliases:add_to_class(ModeTag)
end

return ModeTag


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Switch.types.Feature
--- @alias Feature
---
--- @field public LATCHING_SWITCH number 1
--- @field public MOMENTARY_SWITCH number 2
--- @field public MOMENTARY_SWITCH_RELEASE number 4
--- @field public MOMENTARY_SWITCH_LONG_PRESS number 8
--- @field public MOMENTARY_SWITCH_MULTI_PRESS number 16
--- @field public ACTION_SWITCH number 32

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.LATCHING_SWITCH = 0x0001
Feature.MOMENTARY_SWITCH = 0x0002
Feature.MOMENTARY_SWITCH_RELEASE = 0x0004
Feature.MOMENTARY_SWITCH_LONG_PRESS = 0x0008
Feature.MOMENTARY_SWITCH_MULTI_PRESS = 0x0010
Feature.ACTION_SWITCH = 0x0020

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  LATCHING_SWITCH = 0x0001,
  MOMENTARY_SWITCH = 0x0002,
  MOMENTARY_SWITCH_RELEASE = 0x0004,
  MOMENTARY_SWITCH_LONG_PRESS = 0x0008,
  MOMENTARY_SWITCH_MULTI_PRESS = 0x0010,
  ACTION_SWITCH = 0x0020,
}

--- @function Feature:is_latching_switch_set
--- @return boolean True if the value of LATCHING_SWITCH is non-zero
Feature.is_latching_switch_set = function(self)
  return (self.value & self.LATCHING_SWITCH) ~= 0
end

--- @function Feature:set_latching_switch
--- Set the value of the bit in the LATCHING_SWITCH field to 1
Feature.set_latching_switch = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LATCHING_SWITCH
  else
    self.value = self.LATCHING_SWITCH
  end
end

--- @function Feature:unset_latching_switch
--- Set the value of the bits in the LATCHING_SWITCH field to 0
Feature.unset_latching_switch = function(self)
  self.value = self.value & (~self.LATCHING_SWITCH & self.BASE_MASK)
end
--- @function Feature:is_momentary_switch_set
--- @return boolean True if the value of MOMENTARY_SWITCH is non-zero
Feature.is_momentary_switch_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH) ~= 0
end

--- @function Feature:set_momentary_switch
--- Set the value of the bit in the MOMENTARY_SWITCH field to 1
Feature.set_momentary_switch = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH
  else
    self.value = self.MOMENTARY_SWITCH
  end
end

--- @function Feature:unset_momentary_switch
--- Set the value of the bits in the MOMENTARY_SWITCH field to 0
Feature.unset_momentary_switch = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH & self.BASE_MASK)
end
--- @function Feature:is_momentary_switch_release_set
--- @return boolean True if the value of MOMENTARY_SWITCH_RELEASE is non-zero
Feature.is_momentary_switch_release_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH_RELEASE) ~= 0
end

--- @function Feature:set_momentary_switch_release
--- Set the value of the bit in the MOMENTARY_SWITCH_RELEASE field to 1
Feature.set_momentary_switch_release = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH_RELEASE
  else
    self.value = self.MOMENTARY_SWITCH_RELEASE
  end
end

--- @function Feature:unset_momentary_switch_release
--- Set the value of the bits in the MOMENTARY_SWITCH_RELEASE field to 0
Feature.unset_momentary_switch_release = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH_RELEASE & self.BASE_MASK)
end
--- @function Feature:is_momentary_switch_long_press_set
--- @return boolean True if the value of MOMENTARY_SWITCH_LONG_PRESS is non-zero
Feature.is_momentary_switch_long_press_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH_LONG_PRESS) ~= 0
end

--- @function Feature:set_momentary_switch_long_press
--- Set the value of the bit in the MOMENTARY_SWITCH_LONG_PRESS field to 1
Feature.set_momentary_switch_long_press = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH_LONG_PRESS
  else
    self.value = self.MOMENTARY_SWITCH_LONG_PRESS
  end
end

--- @function Feature:unset_momentary_switch_long_press
--- Set the value of the bits in the MOMENTARY_SWITCH_LONG_PRESS field to 0
Feature.unset_momentary_switch_long_press = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH_LONG_PRESS & self.BASE_MASK)
end
--- @function Feature:is_momentary_switch_multi_press_set
--- @return boolean True if the value of MOMENTARY_SWITCH_MULTI_PRESS is non-zero
Feature.is_momentary_switch_multi_press_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH_MULTI_PRESS) ~= 0
end

--- @function Feature:set_momentary_switch_multi_press
--- Set the value of the bit in the MOMENTARY_SWITCH_MULTI_PRESS field to 1
Feature.set_momentary_switch_multi_press = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH_MULTI_PRESS
  else
    self.value = self.MOMENTARY_SWITCH_MULTI_PRESS
  end
end

--- @function Feature:unset_momentary_switch_multi_press
--- Set the value of the bits in the MOMENTARY_SWITCH_MULTI_PRESS field to 0
Feature.unset_momentary_switch_multi_press = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH_MULTI_PRESS & self.BASE_MASK)
end
--- @function Feature:is_action_switch_set
--- @return boolean True if the value of ACTION_SWITCH is non-zero
Feature.is_action_switch_set = function(self)
  return (self.value & self.ACTION_SWITCH) ~= 0
end

--- @function Feature:set_action_switch
--- Set the value of the bit in the ACTION_SWITCH field to 1
Feature.set_action_switch = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ACTION_SWITCH
  else
    self.value = self.ACTION_SWITCH
  end
end

--- @function Feature:unset_action_switch
--- Set the value of the bits in the ACTION_SWITCH field to 0
Feature.unset_action_switch = function(self)
  self.value = self.value & (~self.ACTION_SWITCH & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.LATCHING_SWITCH |
    Feature.MOMENTARY_SWITCH |
    Feature.MOMENTARY_SWITCH_RELEASE |
    Feature.MOMENTARY_SWITCH_LONG_PRESS |
    Feature.MOMENTARY_SWITCH_MULTI_PRESS |
    Feature.ACTION_SWITCH
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_latching_switch_set = Feature.is_latching_switch_set,
  set_latching_switch = Feature.set_latching_switch,
  unset_latching_switch = Feature.unset_latching_switch,
  is_momentary_switch_set = Feature.is_momentary_switch_set,
  set_momentary_switch = Feature.set_momentary_switch,
  unset_momentary_switch = Feature.unset_momentary_switch,
  is_momentary_switch_release_set = Feature.is_momentary_switch_release_set,
  set_momentary_switch_release = Feature.set_momentary_switch_release,
  unset_momentary_switch_release = Feature.unset_momentary_switch_release,
  is_momentary_switch_long_press_set = Feature.is_momentary_switch_long_press_set,
  set_momentary_switch_long_press = Feature.set_momentary_switch_long_press,
  unset_momentary_switch_long_press = Feature.unset_momentary_switch_long_press,
  is_momentary_switch_multi_press_set = Feature.is_momentary_switch_multi_press_set,
  set_momentary_switch_multi_press = Feature.set_momentary_switch_multi_press,
  unset_momentary_switch_multi_press = Feature.unset_momentary_switch_multi_press,
  is_action_switch_set = Feature.is_action_switch_set,
  set_action_switch = Feature.set_action_switch,
  unset_action_switch = Feature.unset_action_switch,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Switch.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


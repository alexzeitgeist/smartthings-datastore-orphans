-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.PumpConfigurationAndControl.types.PumpStatusBitmap
--- @alias PumpStatusBitmap
---
--- @field public DEVICE_FAULT number 1
--- @field public SUPPLY_FAULT number 2
--- @field public SPEED_LOW number 4
--- @field public SPEED_HIGH number 8
--- @field public LOCAL_OVERRIDE number 16
--- @field public RUNNING number 32
--- @field public REMOTE_PRESSURE number 64
--- @field public REMOTE_FLOW number 128
--- @field public REMOTE_TEMPERATURE number 256

local PumpStatusBitmap = {}
local new_mt = UintABC.new_mt({NAME = "PumpStatusBitmap", ID = data_types.name_to_id_map["Uint16"]}, 2)

PumpStatusBitmap.BASE_MASK = 0xFFFF
PumpStatusBitmap.DEVICE_FAULT = 0x0001
PumpStatusBitmap.SUPPLY_FAULT = 0x0002
PumpStatusBitmap.SPEED_LOW = 0x0004
PumpStatusBitmap.SPEED_HIGH = 0x0008
PumpStatusBitmap.LOCAL_OVERRIDE = 0x0010
PumpStatusBitmap.RUNNING = 0x0020
PumpStatusBitmap.REMOTE_PRESSURE = 0x0040
PumpStatusBitmap.REMOTE_FLOW = 0x0080
PumpStatusBitmap.REMOTE_TEMPERATURE = 0x0100

PumpStatusBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  DEVICE_FAULT = 0x0001,
  SUPPLY_FAULT = 0x0002,
  SPEED_LOW = 0x0004,
  SPEED_HIGH = 0x0008,
  LOCAL_OVERRIDE = 0x0010,
  RUNNING = 0x0020,
  REMOTE_PRESSURE = 0x0040,
  REMOTE_FLOW = 0x0080,
  REMOTE_TEMPERATURE = 0x0100,
}

--- @function PumpStatusBitmap:is_device_fault_set
--- @return boolean True if the value of DEVICE_FAULT is non-zero
PumpStatusBitmap.is_device_fault_set = function(self)
  return (self.value & self.DEVICE_FAULT) ~= 0
end

--- @function PumpStatusBitmap:set_device_fault
--- Set the value of the bit in the DEVICE_FAULT field to 1
PumpStatusBitmap.set_device_fault = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DEVICE_FAULT
  else
    self.value = self.DEVICE_FAULT
  end
end

--- @function PumpStatusBitmap:unset_device_fault
--- Set the value of the bits in the DEVICE_FAULT field to 0
PumpStatusBitmap.unset_device_fault = function(self)
  self.value = self.value & (~self.DEVICE_FAULT & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_supply_fault_set
--- @return boolean True if the value of SUPPLY_FAULT is non-zero
PumpStatusBitmap.is_supply_fault_set = function(self)
  return (self.value & self.SUPPLY_FAULT) ~= 0
end

--- @function PumpStatusBitmap:set_supply_fault
--- Set the value of the bit in the SUPPLY_FAULT field to 1
PumpStatusBitmap.set_supply_fault = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SUPPLY_FAULT
  else
    self.value = self.SUPPLY_FAULT
  end
end

--- @function PumpStatusBitmap:unset_supply_fault
--- Set the value of the bits in the SUPPLY_FAULT field to 0
PumpStatusBitmap.unset_supply_fault = function(self)
  self.value = self.value & (~self.SUPPLY_FAULT & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_speed_low_set
--- @return boolean True if the value of SPEED_LOW is non-zero
PumpStatusBitmap.is_speed_low_set = function(self)
  return (self.value & self.SPEED_LOW) ~= 0
end

--- @function PumpStatusBitmap:set_speed_low
--- Set the value of the bit in the SPEED_LOW field to 1
PumpStatusBitmap.set_speed_low = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SPEED_LOW
  else
    self.value = self.SPEED_LOW
  end
end

--- @function PumpStatusBitmap:unset_speed_low
--- Set the value of the bits in the SPEED_LOW field to 0
PumpStatusBitmap.unset_speed_low = function(self)
  self.value = self.value & (~self.SPEED_LOW & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_speed_high_set
--- @return boolean True if the value of SPEED_HIGH is non-zero
PumpStatusBitmap.is_speed_high_set = function(self)
  return (self.value & self.SPEED_HIGH) ~= 0
end

--- @function PumpStatusBitmap:set_speed_high
--- Set the value of the bit in the SPEED_HIGH field to 1
PumpStatusBitmap.set_speed_high = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SPEED_HIGH
  else
    self.value = self.SPEED_HIGH
  end
end

--- @function PumpStatusBitmap:unset_speed_high
--- Set the value of the bits in the SPEED_HIGH field to 0
PumpStatusBitmap.unset_speed_high = function(self)
  self.value = self.value & (~self.SPEED_HIGH & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_local_override_set
--- @return boolean True if the value of LOCAL_OVERRIDE is non-zero
PumpStatusBitmap.is_local_override_set = function(self)
  return (self.value & self.LOCAL_OVERRIDE) ~= 0
end

--- @function PumpStatusBitmap:set_local_override
--- Set the value of the bit in the LOCAL_OVERRIDE field to 1
PumpStatusBitmap.set_local_override = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LOCAL_OVERRIDE
  else
    self.value = self.LOCAL_OVERRIDE
  end
end

--- @function PumpStatusBitmap:unset_local_override
--- Set the value of the bits in the LOCAL_OVERRIDE field to 0
PumpStatusBitmap.unset_local_override = function(self)
  self.value = self.value & (~self.LOCAL_OVERRIDE & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_running_set
--- @return boolean True if the value of RUNNING is non-zero
PumpStatusBitmap.is_running_set = function(self)
  return (self.value & self.RUNNING) ~= 0
end

--- @function PumpStatusBitmap:set_running
--- Set the value of the bit in the RUNNING field to 1
PumpStatusBitmap.set_running = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RUNNING
  else
    self.value = self.RUNNING
  end
end

--- @function PumpStatusBitmap:unset_running
--- Set the value of the bits in the RUNNING field to 0
PumpStatusBitmap.unset_running = function(self)
  self.value = self.value & (~self.RUNNING & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_remote_pressure_set
--- @return boolean True if the value of REMOTE_PRESSURE is non-zero
PumpStatusBitmap.is_remote_pressure_set = function(self)
  return (self.value & self.REMOTE_PRESSURE) ~= 0
end

--- @function PumpStatusBitmap:set_remote_pressure
--- Set the value of the bit in the REMOTE_PRESSURE field to 1
PumpStatusBitmap.set_remote_pressure = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REMOTE_PRESSURE
  else
    self.value = self.REMOTE_PRESSURE
  end
end

--- @function PumpStatusBitmap:unset_remote_pressure
--- Set the value of the bits in the REMOTE_PRESSURE field to 0
PumpStatusBitmap.unset_remote_pressure = function(self)
  self.value = self.value & (~self.REMOTE_PRESSURE & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_remote_flow_set
--- @return boolean True if the value of REMOTE_FLOW is non-zero
PumpStatusBitmap.is_remote_flow_set = function(self)
  return (self.value & self.REMOTE_FLOW) ~= 0
end

--- @function PumpStatusBitmap:set_remote_flow
--- Set the value of the bit in the REMOTE_FLOW field to 1
PumpStatusBitmap.set_remote_flow = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REMOTE_FLOW
  else
    self.value = self.REMOTE_FLOW
  end
end

--- @function PumpStatusBitmap:unset_remote_flow
--- Set the value of the bits in the REMOTE_FLOW field to 0
PumpStatusBitmap.unset_remote_flow = function(self)
  self.value = self.value & (~self.REMOTE_FLOW & self.BASE_MASK)
end
--- @function PumpStatusBitmap:is_remote_temperature_set
--- @return boolean True if the value of REMOTE_TEMPERATURE is non-zero
PumpStatusBitmap.is_remote_temperature_set = function(self)
  return (self.value & self.REMOTE_TEMPERATURE) ~= 0
end

--- @function PumpStatusBitmap:set_remote_temperature
--- Set the value of the bit in the REMOTE_TEMPERATURE field to 1
PumpStatusBitmap.set_remote_temperature = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REMOTE_TEMPERATURE
  else
    self.value = self.REMOTE_TEMPERATURE
  end
end

--- @function PumpStatusBitmap:unset_remote_temperature
--- Set the value of the bits in the REMOTE_TEMPERATURE field to 0
PumpStatusBitmap.unset_remote_temperature = function(self)
  self.value = self.value & (~self.REMOTE_TEMPERATURE & self.BASE_MASK)
end


PumpStatusBitmap.mask_methods = {
  is_device_fault_set = PumpStatusBitmap.is_device_fault_set,
  set_device_fault = PumpStatusBitmap.set_device_fault,
  unset_device_fault = PumpStatusBitmap.unset_device_fault,
  is_supply_fault_set = PumpStatusBitmap.is_supply_fault_set,
  set_supply_fault = PumpStatusBitmap.set_supply_fault,
  unset_supply_fault = PumpStatusBitmap.unset_supply_fault,
  is_speed_low_set = PumpStatusBitmap.is_speed_low_set,
  set_speed_low = PumpStatusBitmap.set_speed_low,
  unset_speed_low = PumpStatusBitmap.unset_speed_low,
  is_speed_high_set = PumpStatusBitmap.is_speed_high_set,
  set_speed_high = PumpStatusBitmap.set_speed_high,
  unset_speed_high = PumpStatusBitmap.unset_speed_high,
  is_local_override_set = PumpStatusBitmap.is_local_override_set,
  set_local_override = PumpStatusBitmap.set_local_override,
  unset_local_override = PumpStatusBitmap.unset_local_override,
  is_running_set = PumpStatusBitmap.is_running_set,
  set_running = PumpStatusBitmap.set_running,
  unset_running = PumpStatusBitmap.unset_running,
  is_remote_pressure_set = PumpStatusBitmap.is_remote_pressure_set,
  set_remote_pressure = PumpStatusBitmap.set_remote_pressure,
  unset_remote_pressure = PumpStatusBitmap.unset_remote_pressure,
  is_remote_flow_set = PumpStatusBitmap.is_remote_flow_set,
  set_remote_flow = PumpStatusBitmap.set_remote_flow,
  unset_remote_flow = PumpStatusBitmap.unset_remote_flow,
  is_remote_temperature_set = PumpStatusBitmap.is_remote_temperature_set,
  set_remote_temperature = PumpStatusBitmap.set_remote_temperature,
  unset_remote_temperature = PumpStatusBitmap.unset_remote_temperature,
}

PumpStatusBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(PumpStatusBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.PumpConfigurationAndControl.types.PumpStatusBitmap")
if has_aliases then
  aliases:add_to_class(PumpStatusBitmap)
end

return PumpStatusBitmap


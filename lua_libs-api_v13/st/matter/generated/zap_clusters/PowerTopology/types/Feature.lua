-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.PowerTopology.types.Feature
--- @alias Feature
---
--- @field public NODE_TOPOLOGY number 1
--- @field public TREE_TOPOLOGY number 2
--- @field public SET_TOPOLOGY number 4
--- @field public DYNAMIC_POWER_FLOW number 8

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.NODE_TOPOLOGY = 0x0001
Feature.TREE_TOPOLOGY = 0x0002
Feature.SET_TOPOLOGY = 0x0004
Feature.DYNAMIC_POWER_FLOW = 0x0008

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  NODE_TOPOLOGY = 0x0001,
  TREE_TOPOLOGY = 0x0002,
  SET_TOPOLOGY = 0x0004,
  DYNAMIC_POWER_FLOW = 0x0008,
}

--- @function Feature:is_node_topology_set
--- @return boolean True if the value of NODE_TOPOLOGY is non-zero
Feature.is_node_topology_set = function(self)
  return (self.value & self.NODE_TOPOLOGY) ~= 0
end

--- @function Feature:set_node_topology
--- Set the value of the bit in the NODE_TOPOLOGY field to 1
Feature.set_node_topology = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NODE_TOPOLOGY
  else
    self.value = self.NODE_TOPOLOGY
  end
end

--- @function Feature:unset_node_topology
--- Set the value of the bits in the NODE_TOPOLOGY field to 0
Feature.unset_node_topology = function(self)
  self.value = self.value & (~self.NODE_TOPOLOGY & self.BASE_MASK)
end
--- @function Feature:is_tree_topology_set
--- @return boolean True if the value of TREE_TOPOLOGY is non-zero
Feature.is_tree_topology_set = function(self)
  return (self.value & self.TREE_TOPOLOGY) ~= 0
end

--- @function Feature:set_tree_topology
--- Set the value of the bit in the TREE_TOPOLOGY field to 1
Feature.set_tree_topology = function(self)
  if self.value ~= nil then
    self.value = self.value | self.TREE_TOPOLOGY
  else
    self.value = self.TREE_TOPOLOGY
  end
end

--- @function Feature:unset_tree_topology
--- Set the value of the bits in the TREE_TOPOLOGY field to 0
Feature.unset_tree_topology = function(self)
  self.value = self.value & (~self.TREE_TOPOLOGY & self.BASE_MASK)
end
--- @function Feature:is_set_topology_set
--- @return boolean True if the value of SET_TOPOLOGY is non-zero
Feature.is_set_topology_set = function(self)
  return (self.value & self.SET_TOPOLOGY) ~= 0
end

--- @function Feature:set_set_topology
--- Set the value of the bit in the SET_TOPOLOGY field to 1
Feature.set_set_topology = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SET_TOPOLOGY
  else
    self.value = self.SET_TOPOLOGY
  end
end

--- @function Feature:unset_set_topology
--- Set the value of the bits in the SET_TOPOLOGY field to 0
Feature.unset_set_topology = function(self)
  self.value = self.value & (~self.SET_TOPOLOGY & self.BASE_MASK)
end
--- @function Feature:is_dynamic_power_flow_set
--- @return boolean True if the value of DYNAMIC_POWER_FLOW is non-zero
Feature.is_dynamic_power_flow_set = function(self)
  return (self.value & self.DYNAMIC_POWER_FLOW) ~= 0
end

--- @function Feature:set_dynamic_power_flow
--- Set the value of the bit in the DYNAMIC_POWER_FLOW field to 1
Feature.set_dynamic_power_flow = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DYNAMIC_POWER_FLOW
  else
    self.value = self.DYNAMIC_POWER_FLOW
  end
end

--- @function Feature:unset_dynamic_power_flow
--- Set the value of the bits in the DYNAMIC_POWER_FLOW field to 0
Feature.unset_dynamic_power_flow = function(self)
  self.value = self.value & (~self.DYNAMIC_POWER_FLOW & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.NODE_TOPOLOGY |
    Feature.TREE_TOPOLOGY |
    Feature.SET_TOPOLOGY |
    Feature.DYNAMIC_POWER_FLOW
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_node_topology_set = Feature.is_node_topology_set,
  set_node_topology = Feature.set_node_topology,
  unset_node_topology = Feature.unset_node_topology,
  is_tree_topology_set = Feature.is_tree_topology_set,
  set_tree_topology = Feature.set_tree_topology,
  unset_tree_topology = Feature.unset_tree_topology,
  is_set_topology_set = Feature.is_set_topology_set,
  set_set_topology = Feature.set_set_topology,
  unset_set_topology = Feature.unset_set_topology,
  is_dynamic_power_flow_set = Feature.is_dynamic_power_flow_set,
  set_dynamic_power_flow = Feature.set_dynamic_power_flow,
  unset_dynamic_power_flow = Feature.unset_dynamic_power_flow,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.PowerTopology.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


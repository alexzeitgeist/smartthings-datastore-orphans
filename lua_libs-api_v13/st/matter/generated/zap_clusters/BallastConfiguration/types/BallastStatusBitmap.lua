-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.BallastConfiguration.types.BallastStatusBitmap
--- @alias BallastStatusBitmap
---
--- @field public BALLAST_NON_OPERATIONAL number 1
--- @field public LAMP_FAILURE number 2

local BallastStatusBitmap = {}
local new_mt = UintABC.new_mt({NAME = "BallastStatusBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

BallastStatusBitmap.BASE_MASK = 0xFFFF
BallastStatusBitmap.BALLAST_NON_OPERATIONAL = 0x0001
BallastStatusBitmap.LAMP_FAILURE = 0x0002

BallastStatusBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  BALLAST_NON_OPERATIONAL = 0x0001,
  LAMP_FAILURE = 0x0002,
}

--- @function BallastStatusBitmap:is_ballast_non_operational_set
--- @return boolean True if the value of BALLAST_NON_OPERATIONAL is non-zero
BallastStatusBitmap.is_ballast_non_operational_set = function(self)
  return (self.value & self.BALLAST_NON_OPERATIONAL) ~= 0
end

--- @function BallastStatusBitmap:set_ballast_non_operational
--- Set the value of the bit in the BALLAST_NON_OPERATIONAL field to 1
BallastStatusBitmap.set_ballast_non_operational = function(self)
  if self.value ~= nil then
    self.value = self.value | self.BALLAST_NON_OPERATIONAL
  else
    self.value = self.BALLAST_NON_OPERATIONAL
  end
end

--- @function BallastStatusBitmap:unset_ballast_non_operational
--- Set the value of the bits in the BALLAST_NON_OPERATIONAL field to 0
BallastStatusBitmap.unset_ballast_non_operational = function(self)
  self.value = self.value & (~self.BALLAST_NON_OPERATIONAL & self.BASE_MASK)
end
--- @function BallastStatusBitmap:is_lamp_failure_set
--- @return boolean True if the value of LAMP_FAILURE is non-zero
BallastStatusBitmap.is_lamp_failure_set = function(self)
  return (self.value & self.LAMP_FAILURE) ~= 0
end

--- @function BallastStatusBitmap:set_lamp_failure
--- Set the value of the bit in the LAMP_FAILURE field to 1
BallastStatusBitmap.set_lamp_failure = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LAMP_FAILURE
  else
    self.value = self.LAMP_FAILURE
  end
end

--- @function BallastStatusBitmap:unset_lamp_failure
--- Set the value of the bits in the LAMP_FAILURE field to 0
BallastStatusBitmap.unset_lamp_failure = function(self)
  self.value = self.value & (~self.LAMP_FAILURE & self.BASE_MASK)
end


BallastStatusBitmap.mask_methods = {
  is_ballast_non_operational_set = BallastStatusBitmap.is_ballast_non_operational_set,
  set_ballast_non_operational = BallastStatusBitmap.set_ballast_non_operational,
  unset_ballast_non_operational = BallastStatusBitmap.unset_ballast_non_operational,
  is_lamp_failure_set = BallastStatusBitmap.is_lamp_failure_set,
  set_lamp_failure = BallastStatusBitmap.set_lamp_failure,
  unset_lamp_failure = BallastStatusBitmap.unset_lamp_failure,
}

BallastStatusBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(BallastStatusBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BallastConfiguration.types.BallastStatusBitmap")
if has_aliases then
  aliases:add_to_class(BallastStatusBitmap)
end

return BallastStatusBitmap


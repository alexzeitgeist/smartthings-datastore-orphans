-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local BallastConfigurationServerAttributes = require "st.matter.generated.zap_clusters.BallastConfiguration.server.attributes"
local BallastConfigurationServerCommands = require "st.matter.generated.zap_clusters.BallastConfiguration.server.commands"
local BallastConfigurationTypes = require "st.matter.generated.zap_clusters.BallastConfiguration.types"

--- @class st.matter.generated.zap_clusters.BallastConfiguration
--- @alias BallastConfiguration
---
--- @field public ID number 0x0301 the ID of this cluster
--- @field public NAME string "BallastConfiguration" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.BallastConfigurationServerAttributes | st.matter.generated.zap_clusters.BallastConfigurationClientAttributes
--- @field public commands st.matter.generated.zap_clusters.BallastConfigurationServerCommands | st.matter.generated.zap_clusters.BallastConfigurationClientCommands
--- @field public types st.matter.generated.zap_clusters.BallastConfigurationTypes

local BallastConfiguration = {}

BallastConfiguration.ID = 0x0301
BallastConfiguration.NAME = "BallastConfiguration"
BallastConfiguration.server = {}
BallastConfiguration.client = {}
BallastConfiguration.server.attributes = BallastConfigurationServerAttributes:set_parent_cluster(BallastConfiguration)
BallastConfiguration.server.commands = BallastConfigurationServerCommands:set_parent_cluster(BallastConfiguration)
BallastConfiguration.types = BallastConfigurationTypes

--- Find an attribute by id
---
--- @param attr_id number
function BallastConfiguration:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "PhysicalMinLevel",
    [0x0001] = "PhysicalMaxLevel",
    [0x0002] = "BallastStatus",
    [0x0010] = "MinLevel",
    [0x0011] = "MaxLevel",
    [0x0014] = "IntrinsicBallastFactor",
    [0x0015] = "BallastFactorAdjustment",
    [0x0020] = "LampQuantity",
    [0x0030] = "LampType",
    [0x0031] = "LampManufacturer",
    [0x0032] = "LampRatedHours",
    [0x0033] = "LampBurnHours",
    [0x0034] = "LampAlarmMode",
    [0x0035] = "LampBurnHoursTripPoint",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function BallastConfiguration:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
BallastConfiguration.attribute_direction_map = {
  ["PhysicalMinLevel"] = "server",
  ["PhysicalMaxLevel"] = "server",
  ["BallastStatus"] = "server",
  ["MinLevel"] = "server",
  ["MaxLevel"] = "server",
  ["IntrinsicBallastFactor"] = "server",
  ["BallastFactorAdjustment"] = "server",
  ["LampQuantity"] = "server",
  ["LampType"] = "server",
  ["LampManufacturer"] = "server",
  ["LampRatedHours"] = "server",
  ["LampBurnHours"] = "server",
  ["LampAlarmMode"] = "server",
  ["LampBurnHoursTripPoint"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BallastConfiguration.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BallastConfiguration.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
BallastConfiguration.command_direction_map = {
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BallastConfiguration.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BallastConfiguration.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BallastConfiguration.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BallastConfiguration.command_direction_map[alias] = "client"
    end
  end
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = BallastConfiguration.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, BallastConfiguration.NAME))
  end
  return BallastConfiguration[direction].attributes[key]
end
BallastConfiguration.attributes = {}
setmetatable(BallastConfiguration.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = BallastConfiguration.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, BallastConfiguration.NAME))
  end
  return BallastConfiguration[direction].commands[key]
end
BallastConfiguration.commands = {}
setmetatable(BallastConfiguration.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return BallastConfiguration.server.events[key]
end
BallastConfiguration.events = {}
setmetatable(BallastConfiguration.events, event_helper_mt)

setmetatable(BallastConfiguration, {__index = cluster_base})

return BallastConfiguration


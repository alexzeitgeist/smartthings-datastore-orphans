-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.OnOff.types.Feature
--- @alias Feature
---
--- @field public LIGHTING number 1
--- @field public DEAD_FRONT_BEHAVIOR number 2
--- @field public OFF_ONLY number 4

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.LIGHTING = 0x0001
Feature.DEAD_FRONT_BEHAVIOR = 0x0002
Feature.OFF_ONLY = 0x0004

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  LIGHTING = 0x0001,
  DEAD_FRONT_BEHAVIOR = 0x0002,
  OFF_ONLY = 0x0004,
}

--- @function Feature:is_lighting_set
--- @return boolean True if the value of LIGHTING is non-zero
Feature.is_lighting_set = function(self)
  return (self.value & self.LIGHTING) ~= 0
end

--- @function Feature:set_lighting
--- Set the value of the bit in the LIGHTING field to 1
Feature.set_lighting = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LIGHTING
  else
    self.value = self.LIGHTING
  end
end

--- @function Feature:unset_lighting
--- Set the value of the bits in the LIGHTING field to 0
Feature.unset_lighting = function(self)
  self.value = self.value & (~self.LIGHTING & self.BASE_MASK)
end
--- @function Feature:is_dead_front_behavior_set
--- @return boolean True if the value of DEAD_FRONT_BEHAVIOR is non-zero
Feature.is_dead_front_behavior_set = function(self)
  return (self.value & self.DEAD_FRONT_BEHAVIOR) ~= 0
end

--- @function Feature:set_dead_front_behavior
--- Set the value of the bit in the DEAD_FRONT_BEHAVIOR field to 1
Feature.set_dead_front_behavior = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DEAD_FRONT_BEHAVIOR
  else
    self.value = self.DEAD_FRONT_BEHAVIOR
  end
end

--- @function Feature:unset_dead_front_behavior
--- Set the value of the bits in the DEAD_FRONT_BEHAVIOR field to 0
Feature.unset_dead_front_behavior = function(self)
  self.value = self.value & (~self.DEAD_FRONT_BEHAVIOR & self.BASE_MASK)
end
--- @function Feature:is_off_only_set
--- @return boolean True if the value of OFF_ONLY is non-zero
Feature.is_off_only_set = function(self)
  return (self.value & self.OFF_ONLY) ~= 0
end

--- @function Feature:set_off_only
--- Set the value of the bit in the OFF_ONLY field to 1
Feature.set_off_only = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OFF_ONLY
  else
    self.value = self.OFF_ONLY
  end
end

--- @function Feature:unset_off_only
--- Set the value of the bits in the OFF_ONLY field to 0
Feature.unset_off_only = function(self)
  self.value = self.value & (~self.OFF_ONLY & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.LIGHTING |
    Feature.DEAD_FRONT_BEHAVIOR |
    Feature.OFF_ONLY
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_lighting_set = Feature.is_lighting_set,
  set_lighting = Feature.set_lighting,
  unset_lighting = Feature.unset_lighting,
  is_dead_front_behavior_set = Feature.is_dead_front_behavior_set,
  set_dead_front_behavior = Feature.set_dead_front_behavior,
  unset_dead_front_behavior = Feature.unset_dead_front_behavior,
  is_off_only_set = Feature.is_off_only_set,
  set_off_only = Feature.set_off_only,
  unset_off_only = Feature.unset_off_only,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.OnOff.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


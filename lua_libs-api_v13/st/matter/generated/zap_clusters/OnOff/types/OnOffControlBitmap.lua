-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.OnOff.types.OnOffControlBitmap
--- @alias OnOffControlBitmap
---
--- @field public ACCEPT_ONLY_WHEN_ON number 1

local OnOffControlBitmap = {}
local new_mt = UintABC.new_mt({NAME = "OnOffControlBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

OnOffControlBitmap.BASE_MASK = 0xFFFF
OnOffControlBitmap.ACCEPT_ONLY_WHEN_ON = 0x0001

OnOffControlBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  ACCEPT_ONLY_WHEN_ON = 0x0001,
}

--- @function OnOffControlBitmap:is_accept_only_when_on_set
--- @return boolean True if the value of ACCEPT_ONLY_WHEN_ON is non-zero
OnOffControlBitmap.is_accept_only_when_on_set = function(self)
  return (self.value & self.ACCEPT_ONLY_WHEN_ON) ~= 0
end

--- @function OnOffControlBitmap:set_accept_only_when_on
--- Set the value of the bit in the ACCEPT_ONLY_WHEN_ON field to 1
OnOffControlBitmap.set_accept_only_when_on = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ACCEPT_ONLY_WHEN_ON
  else
    self.value = self.ACCEPT_ONLY_WHEN_ON
  end
end

--- @function OnOffControlBitmap:unset_accept_only_when_on
--- Set the value of the bits in the ACCEPT_ONLY_WHEN_ON field to 0
OnOffControlBitmap.unset_accept_only_when_on = function(self)
  self.value = self.value & (~self.ACCEPT_ONLY_WHEN_ON & self.BASE_MASK)
end


OnOffControlBitmap.mask_methods = {
  is_accept_only_when_on_set = OnOffControlBitmap.is_accept_only_when_on_set,
  set_accept_only_when_on = OnOffControlBitmap.set_accept_only_when_on,
  unset_accept_only_when_on = OnOffControlBitmap.unset_accept_only_when_on,
}

OnOffControlBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(OnOffControlBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.OnOff.types.OnOffControlBitmap")
if has_aliases then
  aliases:add_to_class(OnOffControlBitmap)
end

return OnOffControlBitmap


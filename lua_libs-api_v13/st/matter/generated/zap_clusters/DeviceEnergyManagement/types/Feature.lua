-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DeviceEnergyManagement.types.Feature
--- @alias Feature
---
--- @field public POWER_ADJUSTMENT number 1
--- @field public POWER_FORECAST_REPORTING number 2
--- @field public STATE_FORECAST_REPORTING number 4
--- @field public START_TIME_ADJUSTMENT number 8
--- @field public PAUSABLE number 16
--- @field public FORECAST_ADJUSTMENT number 32
--- @field public CONSTRAINT_BASED_ADJUSTMENT number 64

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.POWER_ADJUSTMENT = 0x0001
Feature.POWER_FORECAST_REPORTING = 0x0002
Feature.STATE_FORECAST_REPORTING = 0x0004
Feature.START_TIME_ADJUSTMENT = 0x0008
Feature.PAUSABLE = 0x0010
Feature.FORECAST_ADJUSTMENT = 0x0020
Feature.CONSTRAINT_BASED_ADJUSTMENT = 0x0040

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  POWER_ADJUSTMENT = 0x0001,
  POWER_FORECAST_REPORTING = 0x0002,
  STATE_FORECAST_REPORTING = 0x0004,
  START_TIME_ADJUSTMENT = 0x0008,
  PAUSABLE = 0x0010,
  FORECAST_ADJUSTMENT = 0x0020,
  CONSTRAINT_BASED_ADJUSTMENT = 0x0040,
}

--- @function Feature:is_power_adjustment_set
--- @return boolean True if the value of POWER_ADJUSTMENT is non-zero
Feature.is_power_adjustment_set = function(self)
  return (self.value & self.POWER_ADJUSTMENT) ~= 0
end

--- @function Feature:set_power_adjustment
--- Set the value of the bit in the POWER_ADJUSTMENT field to 1
Feature.set_power_adjustment = function(self)
  if self.value ~= nil then
    self.value = self.value | self.POWER_ADJUSTMENT
  else
    self.value = self.POWER_ADJUSTMENT
  end
end

--- @function Feature:unset_power_adjustment
--- Set the value of the bits in the POWER_ADJUSTMENT field to 0
Feature.unset_power_adjustment = function(self)
  self.value = self.value & (~self.POWER_ADJUSTMENT & self.BASE_MASK)
end
--- @function Feature:is_power_forecast_reporting_set
--- @return boolean True if the value of POWER_FORECAST_REPORTING is non-zero
Feature.is_power_forecast_reporting_set = function(self)
  return (self.value & self.POWER_FORECAST_REPORTING) ~= 0
end

--- @function Feature:set_power_forecast_reporting
--- Set the value of the bit in the POWER_FORECAST_REPORTING field to 1
Feature.set_power_forecast_reporting = function(self)
  if self.value ~= nil then
    self.value = self.value | self.POWER_FORECAST_REPORTING
  else
    self.value = self.POWER_FORECAST_REPORTING
  end
end

--- @function Feature:unset_power_forecast_reporting
--- Set the value of the bits in the POWER_FORECAST_REPORTING field to 0
Feature.unset_power_forecast_reporting = function(self)
  self.value = self.value & (~self.POWER_FORECAST_REPORTING & self.BASE_MASK)
end
--- @function Feature:is_state_forecast_reporting_set
--- @return boolean True if the value of STATE_FORECAST_REPORTING is non-zero
Feature.is_state_forecast_reporting_set = function(self)
  return (self.value & self.STATE_FORECAST_REPORTING) ~= 0
end

--- @function Feature:set_state_forecast_reporting
--- Set the value of the bit in the STATE_FORECAST_REPORTING field to 1
Feature.set_state_forecast_reporting = function(self)
  if self.value ~= nil then
    self.value = self.value | self.STATE_FORECAST_REPORTING
  else
    self.value = self.STATE_FORECAST_REPORTING
  end
end

--- @function Feature:unset_state_forecast_reporting
--- Set the value of the bits in the STATE_FORECAST_REPORTING field to 0
Feature.unset_state_forecast_reporting = function(self)
  self.value = self.value & (~self.STATE_FORECAST_REPORTING & self.BASE_MASK)
end
--- @function Feature:is_start_time_adjustment_set
--- @return boolean True if the value of START_TIME_ADJUSTMENT is non-zero
Feature.is_start_time_adjustment_set = function(self)
  return (self.value & self.START_TIME_ADJUSTMENT) ~= 0
end

--- @function Feature:set_start_time_adjustment
--- Set the value of the bit in the START_TIME_ADJUSTMENT field to 1
Feature.set_start_time_adjustment = function(self)
  if self.value ~= nil then
    self.value = self.value | self.START_TIME_ADJUSTMENT
  else
    self.value = self.START_TIME_ADJUSTMENT
  end
end

--- @function Feature:unset_start_time_adjustment
--- Set the value of the bits in the START_TIME_ADJUSTMENT field to 0
Feature.unset_start_time_adjustment = function(self)
  self.value = self.value & (~self.START_TIME_ADJUSTMENT & self.BASE_MASK)
end
--- @function Feature:is_pausable_set
--- @return boolean True if the value of PAUSABLE is non-zero
Feature.is_pausable_set = function(self)
  return (self.value & self.PAUSABLE) ~= 0
end

--- @function Feature:set_pausable
--- Set the value of the bit in the PAUSABLE field to 1
Feature.set_pausable = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PAUSABLE
  else
    self.value = self.PAUSABLE
  end
end

--- @function Feature:unset_pausable
--- Set the value of the bits in the PAUSABLE field to 0
Feature.unset_pausable = function(self)
  self.value = self.value & (~self.PAUSABLE & self.BASE_MASK)
end
--- @function Feature:is_forecast_adjustment_set
--- @return boolean True if the value of FORECAST_ADJUSTMENT is non-zero
Feature.is_forecast_adjustment_set = function(self)
  return (self.value & self.FORECAST_ADJUSTMENT) ~= 0
end

--- @function Feature:set_forecast_adjustment
--- Set the value of the bit in the FORECAST_ADJUSTMENT field to 1
Feature.set_forecast_adjustment = function(self)
  if self.value ~= nil then
    self.value = self.value | self.FORECAST_ADJUSTMENT
  else
    self.value = self.FORECAST_ADJUSTMENT
  end
end

--- @function Feature:unset_forecast_adjustment
--- Set the value of the bits in the FORECAST_ADJUSTMENT field to 0
Feature.unset_forecast_adjustment = function(self)
  self.value = self.value & (~self.FORECAST_ADJUSTMENT & self.BASE_MASK)
end
--- @function Feature:is_constraint_based_adjustment_set
--- @return boolean True if the value of CONSTRAINT_BASED_ADJUSTMENT is non-zero
Feature.is_constraint_based_adjustment_set = function(self)
  return (self.value & self.CONSTRAINT_BASED_ADJUSTMENT) ~= 0
end

--- @function Feature:set_constraint_based_adjustment
--- Set the value of the bit in the CONSTRAINT_BASED_ADJUSTMENT field to 1
Feature.set_constraint_based_adjustment = function(self)
  if self.value ~= nil then
    self.value = self.value | self.CONSTRAINT_BASED_ADJUSTMENT
  else
    self.value = self.CONSTRAINT_BASED_ADJUSTMENT
  end
end

--- @function Feature:unset_constraint_based_adjustment
--- Set the value of the bits in the CONSTRAINT_BASED_ADJUSTMENT field to 0
Feature.unset_constraint_based_adjustment = function(self)
  self.value = self.value & (~self.CONSTRAINT_BASED_ADJUSTMENT & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.POWER_ADJUSTMENT |
    Feature.POWER_FORECAST_REPORTING |
    Feature.STATE_FORECAST_REPORTING |
    Feature.START_TIME_ADJUSTMENT |
    Feature.PAUSABLE |
    Feature.FORECAST_ADJUSTMENT |
    Feature.CONSTRAINT_BASED_ADJUSTMENT
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_power_adjustment_set = Feature.is_power_adjustment_set,
  set_power_adjustment = Feature.set_power_adjustment,
  unset_power_adjustment = Feature.unset_power_adjustment,
  is_power_forecast_reporting_set = Feature.is_power_forecast_reporting_set,
  set_power_forecast_reporting = Feature.set_power_forecast_reporting,
  unset_power_forecast_reporting = Feature.unset_power_forecast_reporting,
  is_state_forecast_reporting_set = Feature.is_state_forecast_reporting_set,
  set_state_forecast_reporting = Feature.set_state_forecast_reporting,
  unset_state_forecast_reporting = Feature.unset_state_forecast_reporting,
  is_start_time_adjustment_set = Feature.is_start_time_adjustment_set,
  set_start_time_adjustment = Feature.set_start_time_adjustment,
  unset_start_time_adjustment = Feature.unset_start_time_adjustment,
  is_pausable_set = Feature.is_pausable_set,
  set_pausable = Feature.set_pausable,
  unset_pausable = Feature.unset_pausable,
  is_forecast_adjustment_set = Feature.is_forecast_adjustment_set,
  set_forecast_adjustment = Feature.set_forecast_adjustment,
  unset_forecast_adjustment = Feature.unset_forecast_adjustment,
  is_constraint_based_adjustment_set = Feature.is_constraint_based_adjustment_set,
  set_constraint_based_adjustment = Feature.set_constraint_based_adjustment,
  unset_constraint_based_adjustment = Feature.unset_constraint_based_adjustment,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.DeviceEnergyManagement.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


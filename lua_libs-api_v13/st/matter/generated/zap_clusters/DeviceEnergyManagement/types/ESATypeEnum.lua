-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DeviceEnergyManagement.types.ESATypeEnum: st.matter.data_types.Uint8
--- @alias ESATypeEnum
---
--- @field public byte_length number 1
--- @field public EVSE number 0
--- @field public SPACE_HEATING number 1
--- @field public WATER_HEATING number 2
--- @field public SPACE_COOLING number 3
--- @field public SPACE_HEATING_COOLING number 4
--- @field public BATTERY_STORAGE number 5
--- @field public SOLARPV number 6
--- @field public FRIDGE_FREEZER number 7
--- @field public WASHING_MACHINE number 8
--- @field public DISHWASHER number 9
--- @field public COOKING number 10
--- @field public HOME_WATER_PUMP number 11
--- @field public IRRIGATION_WATER_PUMP number 12
--- @field public POOL_PUMP number 13
--- @field public OTHER number 255

local ESATypeEnum = {}
local new_mt = UintABC.new_mt({NAME = "ESATypeEnum", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.EVSE] = "EVSE",
    [self.SPACE_HEATING] = "SPACE_HEATING",
    [self.WATER_HEATING] = "WATER_HEATING",
    [self.SPACE_COOLING] = "SPACE_COOLING",
    [self.SPACE_HEATING_COOLING] = "SPACE_HEATING_COOLING",
    [self.BATTERY_STORAGE] = "BATTERY_STORAGE",
    [self.SOLARPV] = "SOLARPV",
    [self.FRIDGE_FREEZER] = "FRIDGE_FREEZER",
    [self.WASHING_MACHINE] = "WASHING_MACHINE",
    [self.DISHWASHER] = "DISHWASHER",
    [self.COOKING] = "COOKING",
    [self.HOME_WATER_PUMP] = "HOME_WATER_PUMP",
    [self.IRRIGATION_WATER_PUMP] = "IRRIGATION_WATER_PUMP",
    [self.POOL_PUMP] = "POOL_PUMP",
    [self.OTHER] = "OTHER",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.EVSE  = 0x00
new_mt.__index.SPACE_HEATING  = 0x01
new_mt.__index.WATER_HEATING  = 0x02
new_mt.__index.SPACE_COOLING  = 0x03
new_mt.__index.SPACE_HEATING_COOLING  = 0x04
new_mt.__index.BATTERY_STORAGE  = 0x05
new_mt.__index.SOLARPV  = 0x06
new_mt.__index.FRIDGE_FREEZER  = 0x07
new_mt.__index.WASHING_MACHINE  = 0x08
new_mt.__index.DISHWASHER  = 0x09
new_mt.__index.COOKING  = 0x0A
new_mt.__index.HOME_WATER_PUMP  = 0x0B
new_mt.__index.IRRIGATION_WATER_PUMP  = 0x0C
new_mt.__index.POOL_PUMP  = 0x0D
new_mt.__index.OTHER  = 0xFF

ESATypeEnum.EVSE  = 0x00
ESATypeEnum.SPACE_HEATING  = 0x01
ESATypeEnum.WATER_HEATING  = 0x02
ESATypeEnum.SPACE_COOLING  = 0x03
ESATypeEnum.SPACE_HEATING_COOLING  = 0x04
ESATypeEnum.BATTERY_STORAGE  = 0x05
ESATypeEnum.SOLARPV  = 0x06
ESATypeEnum.FRIDGE_FREEZER  = 0x07
ESATypeEnum.WASHING_MACHINE  = 0x08
ESATypeEnum.DISHWASHER  = 0x09
ESATypeEnum.COOKING  = 0x0A
ESATypeEnum.HOME_WATER_PUMP  = 0x0B
ESATypeEnum.IRRIGATION_WATER_PUMP  = 0x0C
ESATypeEnum.POOL_PUMP  = 0x0D
ESATypeEnum.OTHER  = 0xFF

ESATypeEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ESATypeEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.DeviceEnergyManagement.types.ESATypeEnum")
if has_aliases then
  aliases:add_to_class(ESATypeEnum)
end

return ESATypeEnum


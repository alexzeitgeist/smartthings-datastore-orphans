-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local MicrowaveOvenControlServerAttributes = require "st.matter.generated.zap_clusters.MicrowaveOvenControl.server.attributes"
local MicrowaveOvenControlServerCommands = require "st.matter.generated.zap_clusters.MicrowaveOvenControl.server.commands"
local MicrowaveOvenControlTypes = require "st.matter.generated.zap_clusters.MicrowaveOvenControl.types"

--- @class st.matter.generated.zap_clusters.MicrowaveOvenControl
--- @alias MicrowaveOvenControl
---
--- @field public ID number 0x005F the ID of this cluster
--- @field public NAME string "MicrowaveOvenControl" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.MicrowaveOvenControlServerAttributes | st.matter.generated.zap_clusters.MicrowaveOvenControlClientAttributes
--- @field public commands st.matter.generated.zap_clusters.MicrowaveOvenControlServerCommands | st.matter.generated.zap_clusters.MicrowaveOvenControlClientCommands
--- @field public types st.matter.generated.zap_clusters.MicrowaveOvenControlTypes

local MicrowaveOvenControl = {}

MicrowaveOvenControl.ID = 0x005F
MicrowaveOvenControl.NAME = "MicrowaveOvenControl"
MicrowaveOvenControl.server = {}
MicrowaveOvenControl.client = {}
MicrowaveOvenControl.server.attributes = MicrowaveOvenControlServerAttributes:set_parent_cluster(MicrowaveOvenControl)
MicrowaveOvenControl.server.commands = MicrowaveOvenControlServerCommands:set_parent_cluster(MicrowaveOvenControl)
MicrowaveOvenControl.types = MicrowaveOvenControlTypes

--- Find an attribute by id
---
--- @param attr_id number
function MicrowaveOvenControl:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "CookTime",
    [0x0001] = "MaxCookTime",
    [0x0002] = "PowerSetting",
    [0x0003] = "MinPower",
    [0x0004] = "MaxPower",
    [0x0005] = "PowerStep",
    [0x0006] = "SupportedWatts",
    [0x0007] = "SelectedWattIndex",
    [0x0008] = "WattRating",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function MicrowaveOvenControl:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "SetCookingParameters",
    [0x0001] = "AddMoreTime",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
MicrowaveOvenControl.attribute_direction_map = {
  ["CookTime"] = "server",
  ["MaxCookTime"] = "server",
  ["PowerSetting"] = "server",
  ["MinPower"] = "server",
  ["MaxPower"] = "server",
  ["PowerStep"] = "server",
  ["SupportedWatts"] = "server",
  ["SelectedWattIndex"] = "server",
  ["WattRating"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MicrowaveOvenControl.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      MicrowaveOvenControl.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
MicrowaveOvenControl.command_direction_map = {
  ["SetCookingParameters"] = "server",
  ["AddMoreTime"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MicrowaveOvenControl.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      MicrowaveOvenControl.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MicrowaveOvenControl.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      MicrowaveOvenControl.command_direction_map[alias] = "client"
    end
  end
end

MicrowaveOvenControl.FeatureMap = MicrowaveOvenControl.types.Feature

function MicrowaveOvenControl.are_features_supported(feature, feature_map)
  if (MicrowaveOvenControl.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = MicrowaveOvenControl.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, MicrowaveOvenControl.NAME))
  end
  return MicrowaveOvenControl[direction].attributes[key]
end
MicrowaveOvenControl.attributes = {}
setmetatable(MicrowaveOvenControl.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = MicrowaveOvenControl.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, MicrowaveOvenControl.NAME))
  end
  return MicrowaveOvenControl[direction].commands[key]
end
MicrowaveOvenControl.commands = {}
setmetatable(MicrowaveOvenControl.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return MicrowaveOvenControl.server.events[key]
end
MicrowaveOvenControl.events = {}
setmetatable(MicrowaveOvenControl.events, event_helper_mt)

setmetatable(MicrowaveOvenControl, {__index = cluster_base})

return MicrowaveOvenControl


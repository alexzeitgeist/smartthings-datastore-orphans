-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.SmokeCoAlarm.types.ExpressedStateEnum: st.matter.data_types.Uint8
--- @alias ExpressedStateEnum
---
--- @field public byte_length number 1
--- @field public NORMAL number 0
--- @field public SMOKE_ALARM number 1
--- @field public CO_ALARM number 2
--- @field public BATTERY_ALERT number 3
--- @field public TESTING number 4
--- @field public HARDWARE_FAULT number 5
--- @field public END_OF_SERVICE number 6
--- @field public INTERCONNECT_SMOKE number 7
--- @field public INTERCONNECTCO number 8

local ExpressedStateEnum = {}
local new_mt = UintABC.new_mt({NAME = "ExpressedStateEnum", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.NORMAL] = "NORMAL",
    [self.SMOKE_ALARM] = "SMOKE_ALARM",
    [self.CO_ALARM] = "CO_ALARM",
    [self.BATTERY_ALERT] = "BATTERY_ALERT",
    [self.TESTING] = "TESTING",
    [self.HARDWARE_FAULT] = "HARDWARE_FAULT",
    [self.END_OF_SERVICE] = "END_OF_SERVICE",
    [self.INTERCONNECT_SMOKE] = "INTERCONNECT_SMOKE",
    [self.INTERCONNECTCO] = "INTERCONNECTCO",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.NORMAL  = 0x00
new_mt.__index.SMOKE_ALARM  = 0x01
new_mt.__index.CO_ALARM  = 0x02
new_mt.__index.BATTERY_ALERT  = 0x03
new_mt.__index.TESTING  = 0x04
new_mt.__index.HARDWARE_FAULT  = 0x05
new_mt.__index.END_OF_SERVICE  = 0x06
new_mt.__index.INTERCONNECT_SMOKE  = 0x07
new_mt.__index.INTERCONNECTCO  = 0x08

ExpressedStateEnum.NORMAL  = 0x00
ExpressedStateEnum.SMOKE_ALARM  = 0x01
ExpressedStateEnum.CO_ALARM  = 0x02
ExpressedStateEnum.BATTERY_ALERT  = 0x03
ExpressedStateEnum.TESTING  = 0x04
ExpressedStateEnum.HARDWARE_FAULT  = 0x05
ExpressedStateEnum.END_OF_SERVICE  = 0x06
ExpressedStateEnum.INTERCONNECT_SMOKE  = 0x07
ExpressedStateEnum.INTERCONNECTCO  = 0x08

ExpressedStateEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ExpressedStateEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.SmokeCoAlarm.types.ExpressedStateEnum")
if has_aliases then
  aliases:add_to_class(ExpressedStateEnum)
end

return ExpressedStateEnum


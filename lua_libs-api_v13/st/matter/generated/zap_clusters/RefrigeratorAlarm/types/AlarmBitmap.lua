-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.RefrigeratorAlarm.types.AlarmBitmap
--- @alias AlarmBitmap
---
--- @field public DOOR_OPEN number 1

local AlarmBitmap = {}
local new_mt = UintABC.new_mt({NAME = "AlarmBitmap", ID = data_types.name_to_id_map["Uint32"]}, 4)

AlarmBitmap.BASE_MASK = 0xFFFF
AlarmBitmap.DOOR_OPEN = 0x0001

AlarmBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  DOOR_OPEN = 0x0001,
}

--- @function AlarmBitmap:is_door_open_set
--- @return boolean True if the value of DOOR_OPEN is non-zero
AlarmBitmap.is_door_open_set = function(self)
  return (self.value & self.DOOR_OPEN) ~= 0
end

--- @function AlarmBitmap:set_door_open
--- Set the value of the bit in the DOOR_OPEN field to 1
AlarmBitmap.set_door_open = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DOOR_OPEN
  else
    self.value = self.DOOR_OPEN
  end
end

--- @function AlarmBitmap:unset_door_open
--- Set the value of the bits in the DOOR_OPEN field to 0
AlarmBitmap.unset_door_open = function(self)
  self.value = self.value & (~self.DOOR_OPEN & self.BASE_MASK)
end


AlarmBitmap.mask_methods = {
  is_door_open_set = AlarmBitmap.is_door_open_set,
  set_door_open = AlarmBitmap.set_door_open,
  unset_door_open = AlarmBitmap.unset_door_open,
}

AlarmBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(AlarmBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.RefrigeratorAlarm.types.AlarmBitmap")
if has_aliases then
  aliases:add_to_class(AlarmBitmap)
end

return AlarmBitmap


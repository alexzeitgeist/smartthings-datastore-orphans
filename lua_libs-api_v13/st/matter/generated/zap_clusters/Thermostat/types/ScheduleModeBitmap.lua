-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Thermostat.types.ScheduleModeBitmap
--- @alias ScheduleModeBitmap
---
--- @field public HEAT_SETPOINT_PRESENT number 1
--- @field public COOL_SETPOINT_PRESENT number 2

local ScheduleModeBitmap = {}
local new_mt = UintABC.new_mt({NAME = "ScheduleModeBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

ScheduleModeBitmap.BASE_MASK = 0xFFFF
ScheduleModeBitmap.HEAT_SETPOINT_PRESENT = 0x0001
ScheduleModeBitmap.COOL_SETPOINT_PRESENT = 0x0002

ScheduleModeBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  HEAT_SETPOINT_PRESENT = 0x0001,
  COOL_SETPOINT_PRESENT = 0x0002,
}

--- @function ScheduleModeBitmap:is_heat_setpoint_present_set
--- @return boolean True if the value of HEAT_SETPOINT_PRESENT is non-zero
ScheduleModeBitmap.is_heat_setpoint_present_set = function(self)
  return (self.value & self.HEAT_SETPOINT_PRESENT) ~= 0
end

--- @function ScheduleModeBitmap:set_heat_setpoint_present
--- Set the value of the bit in the HEAT_SETPOINT_PRESENT field to 1
ScheduleModeBitmap.set_heat_setpoint_present = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HEAT_SETPOINT_PRESENT
  else
    self.value = self.HEAT_SETPOINT_PRESENT
  end
end

--- @function ScheduleModeBitmap:unset_heat_setpoint_present
--- Set the value of the bits in the HEAT_SETPOINT_PRESENT field to 0
ScheduleModeBitmap.unset_heat_setpoint_present = function(self)
  self.value = self.value & (~self.HEAT_SETPOINT_PRESENT & self.BASE_MASK)
end
--- @function ScheduleModeBitmap:is_cool_setpoint_present_set
--- @return boolean True if the value of COOL_SETPOINT_PRESENT is non-zero
ScheduleModeBitmap.is_cool_setpoint_present_set = function(self)
  return (self.value & self.COOL_SETPOINT_PRESENT) ~= 0
end

--- @function ScheduleModeBitmap:set_cool_setpoint_present
--- Set the value of the bit in the COOL_SETPOINT_PRESENT field to 1
ScheduleModeBitmap.set_cool_setpoint_present = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COOL_SETPOINT_PRESENT
  else
    self.value = self.COOL_SETPOINT_PRESENT
  end
end

--- @function ScheduleModeBitmap:unset_cool_setpoint_present
--- Set the value of the bits in the COOL_SETPOINT_PRESENT field to 0
ScheduleModeBitmap.unset_cool_setpoint_present = function(self)
  self.value = self.value & (~self.COOL_SETPOINT_PRESENT & self.BASE_MASK)
end


ScheduleModeBitmap.mask_methods = {
  is_heat_setpoint_present_set = ScheduleModeBitmap.is_heat_setpoint_present_set,
  set_heat_setpoint_present = ScheduleModeBitmap.set_heat_setpoint_present,
  unset_heat_setpoint_present = ScheduleModeBitmap.unset_heat_setpoint_present,
  is_cool_setpoint_present_set = ScheduleModeBitmap.is_cool_setpoint_present_set,
  set_cool_setpoint_present = ScheduleModeBitmap.set_cool_setpoint_present,
  unset_cool_setpoint_present = ScheduleModeBitmap.unset_cool_setpoint_present,
}

ScheduleModeBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ScheduleModeBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Thermostat.types.ScheduleModeBitmap")
if has_aliases then
  aliases:add_to_class(ScheduleModeBitmap)
end

return ScheduleModeBitmap


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Thermostat.types.RemoteSensingBitmap
--- @alias RemoteSensingBitmap
---
--- @field public LOCAL_TEMPERATURE number 1
--- @field public OUTDOOR_TEMPERATURE number 2
--- @field public OCCUPANCY number 4

local RemoteSensingBitmap = {}
local new_mt = UintABC.new_mt({NAME = "RemoteSensingBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

RemoteSensingBitmap.BASE_MASK = 0xFFFF
RemoteSensingBitmap.LOCAL_TEMPERATURE = 0x0001
RemoteSensingBitmap.OUTDOOR_TEMPERATURE = 0x0002
RemoteSensingBitmap.OCCUPANCY = 0x0004

RemoteSensingBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  LOCAL_TEMPERATURE = 0x0001,
  OUTDOOR_TEMPERATURE = 0x0002,
  OCCUPANCY = 0x0004,
}

--- @function RemoteSensingBitmap:is_local_temperature_set
--- @return boolean True if the value of LOCAL_TEMPERATURE is non-zero
RemoteSensingBitmap.is_local_temperature_set = function(self)
  return (self.value & self.LOCAL_TEMPERATURE) ~= 0
end

--- @function RemoteSensingBitmap:set_local_temperature
--- Set the value of the bit in the LOCAL_TEMPERATURE field to 1
RemoteSensingBitmap.set_local_temperature = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LOCAL_TEMPERATURE
  else
    self.value = self.LOCAL_TEMPERATURE
  end
end

--- @function RemoteSensingBitmap:unset_local_temperature
--- Set the value of the bits in the LOCAL_TEMPERATURE field to 0
RemoteSensingBitmap.unset_local_temperature = function(self)
  self.value = self.value & (~self.LOCAL_TEMPERATURE & self.BASE_MASK)
end
--- @function RemoteSensingBitmap:is_outdoor_temperature_set
--- @return boolean True if the value of OUTDOOR_TEMPERATURE is non-zero
RemoteSensingBitmap.is_outdoor_temperature_set = function(self)
  return (self.value & self.OUTDOOR_TEMPERATURE) ~= 0
end

--- @function RemoteSensingBitmap:set_outdoor_temperature
--- Set the value of the bit in the OUTDOOR_TEMPERATURE field to 1
RemoteSensingBitmap.set_outdoor_temperature = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OUTDOOR_TEMPERATURE
  else
    self.value = self.OUTDOOR_TEMPERATURE
  end
end

--- @function RemoteSensingBitmap:unset_outdoor_temperature
--- Set the value of the bits in the OUTDOOR_TEMPERATURE field to 0
RemoteSensingBitmap.unset_outdoor_temperature = function(self)
  self.value = self.value & (~self.OUTDOOR_TEMPERATURE & self.BASE_MASK)
end
--- @function RemoteSensingBitmap:is_occupancy_set
--- @return boolean True if the value of OCCUPANCY is non-zero
RemoteSensingBitmap.is_occupancy_set = function(self)
  return (self.value & self.OCCUPANCY) ~= 0
end

--- @function RemoteSensingBitmap:set_occupancy
--- Set the value of the bit in the OCCUPANCY field to 1
RemoteSensingBitmap.set_occupancy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OCCUPANCY
  else
    self.value = self.OCCUPANCY
  end
end

--- @function RemoteSensingBitmap:unset_occupancy
--- Set the value of the bits in the OCCUPANCY field to 0
RemoteSensingBitmap.unset_occupancy = function(self)
  self.value = self.value & (~self.OCCUPANCY & self.BASE_MASK)
end


RemoteSensingBitmap.mask_methods = {
  is_local_temperature_set = RemoteSensingBitmap.is_local_temperature_set,
  set_local_temperature = RemoteSensingBitmap.set_local_temperature,
  unset_local_temperature = RemoteSensingBitmap.unset_local_temperature,
  is_outdoor_temperature_set = RemoteSensingBitmap.is_outdoor_temperature_set,
  set_outdoor_temperature = RemoteSensingBitmap.set_outdoor_temperature,
  unset_outdoor_temperature = RemoteSensingBitmap.unset_outdoor_temperature,
  is_occupancy_set = RemoteSensingBitmap.is_occupancy_set,
  set_occupancy = RemoteSensingBitmap.set_occupancy,
  unset_occupancy = RemoteSensingBitmap.unset_occupancy,
}

RemoteSensingBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(RemoteSensingBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Thermostat.types.RemoteSensingBitmap")
if has_aliases then
  aliases:add_to_class(RemoteSensingBitmap)
end

return RemoteSensingBitmap


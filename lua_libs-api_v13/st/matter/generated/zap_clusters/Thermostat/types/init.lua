-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local types_mt = {}
types_mt.__types_cache = {}
types_mt.__index = function(self, key)
  if types_mt.__types_cache[key] == nil then
    types_mt.__types_cache[key] = require("st.matter.generated.zap_clusters.Thermostat.types." .. key)
  end
  return types_mt.__types_cache[key]
end

--- @class st.matter.generated.zap_clusters.ThermostatTypes
---
--- @field public ACCapacityFormatEnum st.matter.generated.zap_clusters.Thermostat.types.ACCapacityFormatEnum
--- @field public ACCompressorTypeEnum st.matter.generated.zap_clusters.Thermostat.types.ACCompressorTypeEnum
--- @field public ACLouverPositionEnum st.matter.generated.zap_clusters.Thermostat.types.ACLouverPositionEnum
--- @field public ACRefrigerantTypeEnum st.matter.generated.zap_clusters.Thermostat.types.ACRefrigerantTypeEnum
--- @field public ACTypeEnum st.matter.generated.zap_clusters.Thermostat.types.ACTypeEnum
--- @field public ControlSequenceOfOperationEnum st.matter.generated.zap_clusters.Thermostat.types.ControlSequenceOfOperationEnum
--- @field public PresetScenarioEnum st.matter.generated.zap_clusters.Thermostat.types.PresetScenarioEnum
--- @field public SetpointChangeSourceEnum st.matter.generated.zap_clusters.Thermostat.types.SetpointChangeSourceEnum
--- @field public SetpointRaiseLowerModeEnum st.matter.generated.zap_clusters.Thermostat.types.SetpointRaiseLowerModeEnum
--- @field public StartOfWeekEnum st.matter.generated.zap_clusters.Thermostat.types.StartOfWeekEnum
--- @field public SystemModeEnum st.matter.generated.zap_clusters.Thermostat.types.SystemModeEnum
--- @field public TemperatureSetpointHoldEnum st.matter.generated.zap_clusters.Thermostat.types.TemperatureSetpointHoldEnum
--- @field public ThermostatRunningModeEnum st.matter.generated.zap_clusters.Thermostat.types.ThermostatRunningModeEnum

--- @field public ACErrorCodeBitmap st.matter.generated.zap_clusters.Thermostat.types.ACErrorCodeBitmap
--- @field public Feature st.matter.generated.zap_clusters.Thermostat.types.Feature
--- @field public HVACSystemTypeBitmap st.matter.generated.zap_clusters.Thermostat.types.HVACSystemTypeBitmap
--- @field public OccupancyBitmap st.matter.generated.zap_clusters.Thermostat.types.OccupancyBitmap
--- @field public PresetTypeFeaturesBitmap st.matter.generated.zap_clusters.Thermostat.types.PresetTypeFeaturesBitmap
--- @field public ProgrammingOperationModeBitmap st.matter.generated.zap_clusters.Thermostat.types.ProgrammingOperationModeBitmap
--- @field public RelayStateBitmap st.matter.generated.zap_clusters.Thermostat.types.RelayStateBitmap
--- @field public RemoteSensingBitmap st.matter.generated.zap_clusters.Thermostat.types.RemoteSensingBitmap
--- @field public ScheduleDayOfWeekBitmap st.matter.generated.zap_clusters.Thermostat.types.ScheduleDayOfWeekBitmap
--- @field public ScheduleModeBitmap st.matter.generated.zap_clusters.Thermostat.types.ScheduleModeBitmap
--- @field public ScheduleTypeFeaturesBitmap st.matter.generated.zap_clusters.Thermostat.types.ScheduleTypeFeaturesBitmap
local ThermostatTypes = {}

setmetatable(ThermostatTypes, types_mt)

local status, aliases = pcall(require, "st.matter.clusters.aliases.Thermostat.types")
if status then
  aliases:add_to_class(ThermostatTypes)
end

return ThermostatTypes


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local StructureABC = require "st.matter.data_types.base_defs.StructureABC"
--- @alias PresetStruct
--- @class st.matter.clusters.Thermostat.types.PresetStruct: st.matter.data_types.Structure
---
--- @field public preset_handle st.matter.data_types.OctetString1
--- @field public preset_scenario st.matter.generated.zap_clusters.Thermostat.types.PresetScenarioEnum
--- @field public name st.matter.data_types.UTF8String1
--- @field public cooling_setpoint st.matter.data_types.Int16
--- @field public heating_setpoint st.matter.data_types.Int16
--- @field public built_in st.matter.data_types.Boolean
local PresetStruct = {}
local new_mt = StructureABC.new_mt({NAME = "PresetStruct", ID = data_types.name_to_id_map["Structure"]})

PresetStruct.field_defs = {
  {
    name = "preset_handle",
    field_id = 0,
    is_nullable = true,
    is_optional = false,
    data_type = require "st.matter.data_types.OctetString1",
  },
  {
    name = "preset_scenario",
    field_id = 1,
    is_nullable = false,
    is_optional = false,
    data_type = require "st.matter.generated.zap_clusters.Thermostat.types.PresetScenarioEnum",
  },
  {
    name = "name",
    field_id = 2,
    is_nullable = true,
    is_optional = true,
    data_type = require "st.matter.data_types.UTF8String1",
  },
  {
    name = "cooling_setpoint",
    field_id = 3,
    is_nullable = false,
    is_optional = true,
    data_type = require "st.matter.data_types.Int16",
  },
  {
    name = "heating_setpoint",
    field_id = 4,
    is_nullable = false,
    is_optional = true,
    data_type = require "st.matter.data_types.Int16",
  },
  {
    name = "built_in",
    field_id = 5,
    is_nullable = true,
    is_optional = false,
    data_type = require "st.matter.data_types.Boolean",
  },
}

PresetStruct.init = function(cls, tbl)
    local o = {}
    o.elements = {}
    o.num_elements = 0
    setmetatable(o, new_mt)
    for idx, field_def in ipairs(cls.field_defs) do --Note: idx is 1 when field_id is 0
      if (not field_def.is_optional and not field_def.is_nullable) and not tbl[field_def.name] then
        error("Missing non optional or non_nullable field: " .. field_def.name)
      else
        o.elements[field_def.name] = data_types.validate_or_build_type(tbl[field_def.name], field_def.data_type, field_def.name)
        o.elements[field_def.name].field_id = field_def.field_id
        o.num_elements = o.num_elements + 1
      end
    end
    return o
end

PresetStruct.serialize = function(self, buf, include_control, tag)
  return data_types['Structure'].serialize(self.elements, buf, include_control, tag)
end

new_mt.__call = PresetStruct.init
new_mt.__index.serialize = PresetStruct.serialize

PresetStruct.augment_type = function(self, val)
  local elems = {}
  local num_elements = 0
  for _, v in pairs(val.elements) do
    for _, field_def in ipairs(self.field_defs) do
      if field_def.field_id == v.field_id and
         field_def.is_nullable and
         (v.value == nil and v.elements == nil) then
        elems[field_def.name] = data_types.validate_or_build_type(v, data_types.Null, field_def.field_name)
        num_elements = num_elements + 1
      elseif field_def.field_id == v.field_id and not
        (field_def.is_optional and v.value == nil) then
        elems[field_def.name] = data_types.validate_or_build_type(v, field_def.data_type, field_def.field_name)
        num_elements = num_elements + 1
        if field_def.element_type ~= nil then
          for i, e in ipairs(elems[field_def.name].elements) do
            elems[field_def.name].elements[i] = data_types.validate_or_build_type(e, field_def.element_type)
          end
        end
      end
    end
  end
  val.elements = elems
  val.num_elements = num_elements
  setmetatable(val, new_mt)
end

setmetatable(PresetStruct, new_mt)

return PresetStruct


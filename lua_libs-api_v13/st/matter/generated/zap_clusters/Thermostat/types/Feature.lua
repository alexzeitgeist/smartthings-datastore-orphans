-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Thermostat.types.Feature
--- @alias Feature
---
--- @field public HEATING number 1
--- @field public COOLING number 2
--- @field public OCCUPANCY number 4
--- @field public SCHEDULE_CONFIGURATION number 8
--- @field public SETBACK number 16
--- @field public AUTO_MODE number 32
--- @field public LOCAL_TEMPERATURE_NOT_EXPOSED number 64
--- @field public MATTER_SCHEDULE_CONFIGURATION number 128
--- @field public PRESETS number 256

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.HEATING = 0x0001
Feature.COOLING = 0x0002
Feature.OCCUPANCY = 0x0004
Feature.SCHEDULE_CONFIGURATION = 0x0008
Feature.SETBACK = 0x0010
Feature.AUTO_MODE = 0x0020
Feature.LOCAL_TEMPERATURE_NOT_EXPOSED = 0x0040
Feature.MATTER_SCHEDULE_CONFIGURATION = 0x0080
Feature.PRESETS = 0x0100

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  HEATING = 0x0001,
  COOLING = 0x0002,
  OCCUPANCY = 0x0004,
  SCHEDULE_CONFIGURATION = 0x0008,
  SETBACK = 0x0010,
  AUTO_MODE = 0x0020,
  LOCAL_TEMPERATURE_NOT_EXPOSED = 0x0040,
  MATTER_SCHEDULE_CONFIGURATION = 0x0080,
  PRESETS = 0x0100,
}

--- @function Feature:is_heating_set
--- @return boolean True if the value of HEATING is non-zero
Feature.is_heating_set = function(self)
  return (self.value & self.HEATING) ~= 0
end

--- @function Feature:set_heating
--- Set the value of the bit in the HEATING field to 1
Feature.set_heating = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HEATING
  else
    self.value = self.HEATING
  end
end

--- @function Feature:unset_heating
--- Set the value of the bits in the HEATING field to 0
Feature.unset_heating = function(self)
  self.value = self.value & (~self.HEATING & self.BASE_MASK)
end
--- @function Feature:is_cooling_set
--- @return boolean True if the value of COOLING is non-zero
Feature.is_cooling_set = function(self)
  return (self.value & self.COOLING) ~= 0
end

--- @function Feature:set_cooling
--- Set the value of the bit in the COOLING field to 1
Feature.set_cooling = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COOLING
  else
    self.value = self.COOLING
  end
end

--- @function Feature:unset_cooling
--- Set the value of the bits in the COOLING field to 0
Feature.unset_cooling = function(self)
  self.value = self.value & (~self.COOLING & self.BASE_MASK)
end
--- @function Feature:is_occupancy_set
--- @return boolean True if the value of OCCUPANCY is non-zero
Feature.is_occupancy_set = function(self)
  return (self.value & self.OCCUPANCY) ~= 0
end

--- @function Feature:set_occupancy
--- Set the value of the bit in the OCCUPANCY field to 1
Feature.set_occupancy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OCCUPANCY
  else
    self.value = self.OCCUPANCY
  end
end

--- @function Feature:unset_occupancy
--- Set the value of the bits in the OCCUPANCY field to 0
Feature.unset_occupancy = function(self)
  self.value = self.value & (~self.OCCUPANCY & self.BASE_MASK)
end
--- @function Feature:is_schedule_configuration_set
--- @return boolean True if the value of SCHEDULE_CONFIGURATION is non-zero
Feature.is_schedule_configuration_set = function(self)
  return (self.value & self.SCHEDULE_CONFIGURATION) ~= 0
end

--- @function Feature:set_schedule_configuration
--- Set the value of the bit in the SCHEDULE_CONFIGURATION field to 1
Feature.set_schedule_configuration = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SCHEDULE_CONFIGURATION
  else
    self.value = self.SCHEDULE_CONFIGURATION
  end
end

--- @function Feature:unset_schedule_configuration
--- Set the value of the bits in the SCHEDULE_CONFIGURATION field to 0
Feature.unset_schedule_configuration = function(self)
  self.value = self.value & (~self.SCHEDULE_CONFIGURATION & self.BASE_MASK)
end
--- @function Feature:is_setback_set
--- @return boolean True if the value of SETBACK is non-zero
Feature.is_setback_set = function(self)
  return (self.value & self.SETBACK) ~= 0
end

--- @function Feature:set_setback
--- Set the value of the bit in the SETBACK field to 1
Feature.set_setback = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SETBACK
  else
    self.value = self.SETBACK
  end
end

--- @function Feature:unset_setback
--- Set the value of the bits in the SETBACK field to 0
Feature.unset_setback = function(self)
  self.value = self.value & (~self.SETBACK & self.BASE_MASK)
end
--- @function Feature:is_auto_mode_set
--- @return boolean True if the value of AUTO_MODE is non-zero
Feature.is_auto_mode_set = function(self)
  return (self.value & self.AUTO_MODE) ~= 0
end

--- @function Feature:set_auto_mode
--- Set the value of the bit in the AUTO_MODE field to 1
Feature.set_auto_mode = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUTO_MODE
  else
    self.value = self.AUTO_MODE
  end
end

--- @function Feature:unset_auto_mode
--- Set the value of the bits in the AUTO_MODE field to 0
Feature.unset_auto_mode = function(self)
  self.value = self.value & (~self.AUTO_MODE & self.BASE_MASK)
end
--- @function Feature:is_local_temperature_not_exposed_set
--- @return boolean True if the value of LOCAL_TEMPERATURE_NOT_EXPOSED is non-zero
Feature.is_local_temperature_not_exposed_set = function(self)
  return (self.value & self.LOCAL_TEMPERATURE_NOT_EXPOSED) ~= 0
end

--- @function Feature:set_local_temperature_not_exposed
--- Set the value of the bit in the LOCAL_TEMPERATURE_NOT_EXPOSED field to 1
Feature.set_local_temperature_not_exposed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LOCAL_TEMPERATURE_NOT_EXPOSED
  else
    self.value = self.LOCAL_TEMPERATURE_NOT_EXPOSED
  end
end

--- @function Feature:unset_local_temperature_not_exposed
--- Set the value of the bits in the LOCAL_TEMPERATURE_NOT_EXPOSED field to 0
Feature.unset_local_temperature_not_exposed = function(self)
  self.value = self.value & (~self.LOCAL_TEMPERATURE_NOT_EXPOSED & self.BASE_MASK)
end
--- @function Feature:is_matter_schedule_configuration_set
--- @return boolean True if the value of MATTER_SCHEDULE_CONFIGURATION is non-zero
Feature.is_matter_schedule_configuration_set = function(self)
  return (self.value & self.MATTER_SCHEDULE_CONFIGURATION) ~= 0
end

--- @function Feature:set_matter_schedule_configuration
--- Set the value of the bit in the MATTER_SCHEDULE_CONFIGURATION field to 1
Feature.set_matter_schedule_configuration = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MATTER_SCHEDULE_CONFIGURATION
  else
    self.value = self.MATTER_SCHEDULE_CONFIGURATION
  end
end

--- @function Feature:unset_matter_schedule_configuration
--- Set the value of the bits in the MATTER_SCHEDULE_CONFIGURATION field to 0
Feature.unset_matter_schedule_configuration = function(self)
  self.value = self.value & (~self.MATTER_SCHEDULE_CONFIGURATION & self.BASE_MASK)
end
--- @function Feature:is_presets_set
--- @return boolean True if the value of PRESETS is non-zero
Feature.is_presets_set = function(self)
  return (self.value & self.PRESETS) ~= 0
end

--- @function Feature:set_presets
--- Set the value of the bit in the PRESETS field to 1
Feature.set_presets = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PRESETS
  else
    self.value = self.PRESETS
  end
end

--- @function Feature:unset_presets
--- Set the value of the bits in the PRESETS field to 0
Feature.unset_presets = function(self)
  self.value = self.value & (~self.PRESETS & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.HEATING |
    Feature.COOLING |
    Feature.OCCUPANCY |
    Feature.SCHEDULE_CONFIGURATION |
    Feature.SETBACK |
    Feature.AUTO_MODE |
    Feature.LOCAL_TEMPERATURE_NOT_EXPOSED |
    Feature.MATTER_SCHEDULE_CONFIGURATION |
    Feature.PRESETS
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_heating_set = Feature.is_heating_set,
  set_heating = Feature.set_heating,
  unset_heating = Feature.unset_heating,
  is_cooling_set = Feature.is_cooling_set,
  set_cooling = Feature.set_cooling,
  unset_cooling = Feature.unset_cooling,
  is_occupancy_set = Feature.is_occupancy_set,
  set_occupancy = Feature.set_occupancy,
  unset_occupancy = Feature.unset_occupancy,
  is_schedule_configuration_set = Feature.is_schedule_configuration_set,
  set_schedule_configuration = Feature.set_schedule_configuration,
  unset_schedule_configuration = Feature.unset_schedule_configuration,
  is_setback_set = Feature.is_setback_set,
  set_setback = Feature.set_setback,
  unset_setback = Feature.unset_setback,
  is_auto_mode_set = Feature.is_auto_mode_set,
  set_auto_mode = Feature.set_auto_mode,
  unset_auto_mode = Feature.unset_auto_mode,
  is_local_temperature_not_exposed_set = Feature.is_local_temperature_not_exposed_set,
  set_local_temperature_not_exposed = Feature.set_local_temperature_not_exposed,
  unset_local_temperature_not_exposed = Feature.unset_local_temperature_not_exposed,
  is_matter_schedule_configuration_set = Feature.is_matter_schedule_configuration_set,
  set_matter_schedule_configuration = Feature.set_matter_schedule_configuration,
  unset_matter_schedule_configuration = Feature.unset_matter_schedule_configuration,
  is_presets_set = Feature.is_presets_set,
  set_presets = Feature.set_presets,
  unset_presets = Feature.unset_presets,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Thermostat.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


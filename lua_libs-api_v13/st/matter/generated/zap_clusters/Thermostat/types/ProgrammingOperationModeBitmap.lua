-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Thermostat.types.ProgrammingOperationModeBitmap
--- @alias ProgrammingOperationModeBitmap
---
--- @field public SCHEDULE_ACTIVE number 1
--- @field public AUTO_RECOVERY number 2
--- @field public ECONOMY number 4

local ProgrammingOperationModeBitmap = {}
local new_mt = UintABC.new_mt({NAME = "ProgrammingOperationModeBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

ProgrammingOperationModeBitmap.BASE_MASK = 0xFFFF
ProgrammingOperationModeBitmap.SCHEDULE_ACTIVE = 0x0001
ProgrammingOperationModeBitmap.AUTO_RECOVERY = 0x0002
ProgrammingOperationModeBitmap.ECONOMY = 0x0004

ProgrammingOperationModeBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  SCHEDULE_ACTIVE = 0x0001,
  AUTO_RECOVERY = 0x0002,
  ECONOMY = 0x0004,
}

--- @function ProgrammingOperationModeBitmap:is_schedule_active_set
--- @return boolean True if the value of SCHEDULE_ACTIVE is non-zero
ProgrammingOperationModeBitmap.is_schedule_active_set = function(self)
  return (self.value & self.SCHEDULE_ACTIVE) ~= 0
end

--- @function ProgrammingOperationModeBitmap:set_schedule_active
--- Set the value of the bit in the SCHEDULE_ACTIVE field to 1
ProgrammingOperationModeBitmap.set_schedule_active = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SCHEDULE_ACTIVE
  else
    self.value = self.SCHEDULE_ACTIVE
  end
end

--- @function ProgrammingOperationModeBitmap:unset_schedule_active
--- Set the value of the bits in the SCHEDULE_ACTIVE field to 0
ProgrammingOperationModeBitmap.unset_schedule_active = function(self)
  self.value = self.value & (~self.SCHEDULE_ACTIVE & self.BASE_MASK)
end
--- @function ProgrammingOperationModeBitmap:is_auto_recovery_set
--- @return boolean True if the value of AUTO_RECOVERY is non-zero
ProgrammingOperationModeBitmap.is_auto_recovery_set = function(self)
  return (self.value & self.AUTO_RECOVERY) ~= 0
end

--- @function ProgrammingOperationModeBitmap:set_auto_recovery
--- Set the value of the bit in the AUTO_RECOVERY field to 1
ProgrammingOperationModeBitmap.set_auto_recovery = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUTO_RECOVERY
  else
    self.value = self.AUTO_RECOVERY
  end
end

--- @function ProgrammingOperationModeBitmap:unset_auto_recovery
--- Set the value of the bits in the AUTO_RECOVERY field to 0
ProgrammingOperationModeBitmap.unset_auto_recovery = function(self)
  self.value = self.value & (~self.AUTO_RECOVERY & self.BASE_MASK)
end
--- @function ProgrammingOperationModeBitmap:is_economy_set
--- @return boolean True if the value of ECONOMY is non-zero
ProgrammingOperationModeBitmap.is_economy_set = function(self)
  return (self.value & self.ECONOMY) ~= 0
end

--- @function ProgrammingOperationModeBitmap:set_economy
--- Set the value of the bit in the ECONOMY field to 1
ProgrammingOperationModeBitmap.set_economy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ECONOMY
  else
    self.value = self.ECONOMY
  end
end

--- @function ProgrammingOperationModeBitmap:unset_economy
--- Set the value of the bits in the ECONOMY field to 0
ProgrammingOperationModeBitmap.unset_economy = function(self)
  self.value = self.value & (~self.ECONOMY & self.BASE_MASK)
end


ProgrammingOperationModeBitmap.mask_methods = {
  is_schedule_active_set = ProgrammingOperationModeBitmap.is_schedule_active_set,
  set_schedule_active = ProgrammingOperationModeBitmap.set_schedule_active,
  unset_schedule_active = ProgrammingOperationModeBitmap.unset_schedule_active,
  is_auto_recovery_set = ProgrammingOperationModeBitmap.is_auto_recovery_set,
  set_auto_recovery = ProgrammingOperationModeBitmap.set_auto_recovery,
  unset_auto_recovery = ProgrammingOperationModeBitmap.unset_auto_recovery,
  is_economy_set = ProgrammingOperationModeBitmap.is_economy_set,
  set_economy = ProgrammingOperationModeBitmap.set_economy,
  unset_economy = ProgrammingOperationModeBitmap.unset_economy,
}

ProgrammingOperationModeBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ProgrammingOperationModeBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Thermostat.types.ProgrammingOperationModeBitmap")
if has_aliases then
  aliases:add_to_class(ProgrammingOperationModeBitmap)
end

return ProgrammingOperationModeBitmap


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Thermostat.types.ScheduleTypeFeaturesBitmap
--- @alias ScheduleTypeFeaturesBitmap
---
--- @field public SUPPORTS_PRESETS number 1
--- @field public SUPPORTS_SETPOINTS number 2
--- @field public SUPPORTS_NAMES number 4
--- @field public SUPPORTS_OFF number 8

local ScheduleTypeFeaturesBitmap = {}
local new_mt = UintABC.new_mt({NAME = "ScheduleTypeFeaturesBitmap", ID = data_types.name_to_id_map["Uint16"]}, 2)

ScheduleTypeFeaturesBitmap.BASE_MASK = 0xFFFF
ScheduleTypeFeaturesBitmap.SUPPORTS_PRESETS = 0x0001
ScheduleTypeFeaturesBitmap.SUPPORTS_SETPOINTS = 0x0002
ScheduleTypeFeaturesBitmap.SUPPORTS_NAMES = 0x0004
ScheduleTypeFeaturesBitmap.SUPPORTS_OFF = 0x0008

ScheduleTypeFeaturesBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  SUPPORTS_PRESETS = 0x0001,
  SUPPORTS_SETPOINTS = 0x0002,
  SUPPORTS_NAMES = 0x0004,
  SUPPORTS_OFF = 0x0008,
}

--- @function ScheduleTypeFeaturesBitmap:is_supports_presets_set
--- @return boolean True if the value of SUPPORTS_PRESETS is non-zero
ScheduleTypeFeaturesBitmap.is_supports_presets_set = function(self)
  return (self.value & self.SUPPORTS_PRESETS) ~= 0
end

--- @function ScheduleTypeFeaturesBitmap:set_supports_presets
--- Set the value of the bit in the SUPPORTS_PRESETS field to 1
ScheduleTypeFeaturesBitmap.set_supports_presets = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SUPPORTS_PRESETS
  else
    self.value = self.SUPPORTS_PRESETS
  end
end

--- @function ScheduleTypeFeaturesBitmap:unset_supports_presets
--- Set the value of the bits in the SUPPORTS_PRESETS field to 0
ScheduleTypeFeaturesBitmap.unset_supports_presets = function(self)
  self.value = self.value & (~self.SUPPORTS_PRESETS & self.BASE_MASK)
end
--- @function ScheduleTypeFeaturesBitmap:is_supports_setpoints_set
--- @return boolean True if the value of SUPPORTS_SETPOINTS is non-zero
ScheduleTypeFeaturesBitmap.is_supports_setpoints_set = function(self)
  return (self.value & self.SUPPORTS_SETPOINTS) ~= 0
end

--- @function ScheduleTypeFeaturesBitmap:set_supports_setpoints
--- Set the value of the bit in the SUPPORTS_SETPOINTS field to 1
ScheduleTypeFeaturesBitmap.set_supports_setpoints = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SUPPORTS_SETPOINTS
  else
    self.value = self.SUPPORTS_SETPOINTS
  end
end

--- @function ScheduleTypeFeaturesBitmap:unset_supports_setpoints
--- Set the value of the bits in the SUPPORTS_SETPOINTS field to 0
ScheduleTypeFeaturesBitmap.unset_supports_setpoints = function(self)
  self.value = self.value & (~self.SUPPORTS_SETPOINTS & self.BASE_MASK)
end
--- @function ScheduleTypeFeaturesBitmap:is_supports_names_set
--- @return boolean True if the value of SUPPORTS_NAMES is non-zero
ScheduleTypeFeaturesBitmap.is_supports_names_set = function(self)
  return (self.value & self.SUPPORTS_NAMES) ~= 0
end

--- @function ScheduleTypeFeaturesBitmap:set_supports_names
--- Set the value of the bit in the SUPPORTS_NAMES field to 1
ScheduleTypeFeaturesBitmap.set_supports_names = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SUPPORTS_NAMES
  else
    self.value = self.SUPPORTS_NAMES
  end
end

--- @function ScheduleTypeFeaturesBitmap:unset_supports_names
--- Set the value of the bits in the SUPPORTS_NAMES field to 0
ScheduleTypeFeaturesBitmap.unset_supports_names = function(self)
  self.value = self.value & (~self.SUPPORTS_NAMES & self.BASE_MASK)
end
--- @function ScheduleTypeFeaturesBitmap:is_supports_off_set
--- @return boolean True if the value of SUPPORTS_OFF is non-zero
ScheduleTypeFeaturesBitmap.is_supports_off_set = function(self)
  return (self.value & self.SUPPORTS_OFF) ~= 0
end

--- @function ScheduleTypeFeaturesBitmap:set_supports_off
--- Set the value of the bit in the SUPPORTS_OFF field to 1
ScheduleTypeFeaturesBitmap.set_supports_off = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SUPPORTS_OFF
  else
    self.value = self.SUPPORTS_OFF
  end
end

--- @function ScheduleTypeFeaturesBitmap:unset_supports_off
--- Set the value of the bits in the SUPPORTS_OFF field to 0
ScheduleTypeFeaturesBitmap.unset_supports_off = function(self)
  self.value = self.value & (~self.SUPPORTS_OFF & self.BASE_MASK)
end


ScheduleTypeFeaturesBitmap.mask_methods = {
  is_supports_presets_set = ScheduleTypeFeaturesBitmap.is_supports_presets_set,
  set_supports_presets = ScheduleTypeFeaturesBitmap.set_supports_presets,
  unset_supports_presets = ScheduleTypeFeaturesBitmap.unset_supports_presets,
  is_supports_setpoints_set = ScheduleTypeFeaturesBitmap.is_supports_setpoints_set,
  set_supports_setpoints = ScheduleTypeFeaturesBitmap.set_supports_setpoints,
  unset_supports_setpoints = ScheduleTypeFeaturesBitmap.unset_supports_setpoints,
  is_supports_names_set = ScheduleTypeFeaturesBitmap.is_supports_names_set,
  set_supports_names = ScheduleTypeFeaturesBitmap.set_supports_names,
  unset_supports_names = ScheduleTypeFeaturesBitmap.unset_supports_names,
  is_supports_off_set = ScheduleTypeFeaturesBitmap.is_supports_off_set,
  set_supports_off = ScheduleTypeFeaturesBitmap.set_supports_off,
  unset_supports_off = ScheduleTypeFeaturesBitmap.unset_supports_off,
}

ScheduleTypeFeaturesBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ScheduleTypeFeaturesBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Thermostat.types.ScheduleTypeFeaturesBitmap")
if has_aliases then
  aliases:add_to_class(ScheduleTypeFeaturesBitmap)
end

return ScheduleTypeFeaturesBitmap


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Channel.types.RecordingFlagBitmap
--- @alias RecordingFlagBitmap
---
--- @field public SCHEDULED number 1
--- @field public RECORD_SERIES number 2
--- @field public RECORDED number 4

local RecordingFlagBitmap = {}
local new_mt = UintABC.new_mt({NAME = "RecordingFlagBitmap", ID = data_types.name_to_id_map["Uint32"]}, 4)

RecordingFlagBitmap.BASE_MASK = 0xFFFF
RecordingFlagBitmap.SCHEDULED = 0x0001
RecordingFlagBitmap.RECORD_SERIES = 0x0002
RecordingFlagBitmap.RECORDED = 0x0004

RecordingFlagBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  SCHEDULED = 0x0001,
  RECORD_SERIES = 0x0002,
  RECORDED = 0x0004,
}

--- @function RecordingFlagBitmap:is_scheduled_set
--- @return boolean True if the value of SCHEDULED is non-zero
RecordingFlagBitmap.is_scheduled_set = function(self)
  return (self.value & self.SCHEDULED) ~= 0
end

--- @function RecordingFlagBitmap:set_scheduled
--- Set the value of the bit in the SCHEDULED field to 1
RecordingFlagBitmap.set_scheduled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SCHEDULED
  else
    self.value = self.SCHEDULED
  end
end

--- @function RecordingFlagBitmap:unset_scheduled
--- Set the value of the bits in the SCHEDULED field to 0
RecordingFlagBitmap.unset_scheduled = function(self)
  self.value = self.value & (~self.SCHEDULED & self.BASE_MASK)
end
--- @function RecordingFlagBitmap:is_record_series_set
--- @return boolean True if the value of RECORD_SERIES is non-zero
RecordingFlagBitmap.is_record_series_set = function(self)
  return (self.value & self.RECORD_SERIES) ~= 0
end

--- @function RecordingFlagBitmap:set_record_series
--- Set the value of the bit in the RECORD_SERIES field to 1
RecordingFlagBitmap.set_record_series = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RECORD_SERIES
  else
    self.value = self.RECORD_SERIES
  end
end

--- @function RecordingFlagBitmap:unset_record_series
--- Set the value of the bits in the RECORD_SERIES field to 0
RecordingFlagBitmap.unset_record_series = function(self)
  self.value = self.value & (~self.RECORD_SERIES & self.BASE_MASK)
end
--- @function RecordingFlagBitmap:is_recorded_set
--- @return boolean True if the value of RECORDED is non-zero
RecordingFlagBitmap.is_recorded_set = function(self)
  return (self.value & self.RECORDED) ~= 0
end

--- @function RecordingFlagBitmap:set_recorded
--- Set the value of the bit in the RECORDED field to 1
RecordingFlagBitmap.set_recorded = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RECORDED
  else
    self.value = self.RECORDED
  end
end

--- @function RecordingFlagBitmap:unset_recorded
--- Set the value of the bits in the RECORDED field to 0
RecordingFlagBitmap.unset_recorded = function(self)
  self.value = self.value & (~self.RECORDED & self.BASE_MASK)
end


RecordingFlagBitmap.mask_methods = {
  is_scheduled_set = RecordingFlagBitmap.is_scheduled_set,
  set_scheduled = RecordingFlagBitmap.set_scheduled,
  unset_scheduled = RecordingFlagBitmap.unset_scheduled,
  is_record_series_set = RecordingFlagBitmap.is_record_series_set,
  set_record_series = RecordingFlagBitmap.set_record_series,
  unset_record_series = RecordingFlagBitmap.unset_record_series,
  is_recorded_set = RecordingFlagBitmap.is_recorded_set,
  set_recorded = RecordingFlagBitmap.set_recorded,
  unset_recorded = RecordingFlagBitmap.unset_recorded,
}

RecordingFlagBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(RecordingFlagBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Channel.types.RecordingFlagBitmap")
if has_aliases then
  aliases:add_to_class(RecordingFlagBitmap)
end

return RecordingFlagBitmap


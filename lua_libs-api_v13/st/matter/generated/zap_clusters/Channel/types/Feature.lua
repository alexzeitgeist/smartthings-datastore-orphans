-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Channel.types.Feature
--- @alias Feature
---
--- @field public CHANNEL_LIST number 1
--- @field public LINEUP_INFO number 2
--- @field public ELECTRONIC_GUIDE number 4
--- @field public RECORD_PROGRAM number 8

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.CHANNEL_LIST = 0x0001
Feature.LINEUP_INFO = 0x0002
Feature.ELECTRONIC_GUIDE = 0x0004
Feature.RECORD_PROGRAM = 0x0008

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  CHANNEL_LIST = 0x0001,
  LINEUP_INFO = 0x0002,
  ELECTRONIC_GUIDE = 0x0004,
  RECORD_PROGRAM = 0x0008,
}

--- @function Feature:is_channel_list_set
--- @return boolean True if the value of CHANNEL_LIST is non-zero
Feature.is_channel_list_set = function(self)
  return (self.value & self.CHANNEL_LIST) ~= 0
end

--- @function Feature:set_channel_list
--- Set the value of the bit in the CHANNEL_LIST field to 1
Feature.set_channel_list = function(self)
  if self.value ~= nil then
    self.value = self.value | self.CHANNEL_LIST
  else
    self.value = self.CHANNEL_LIST
  end
end

--- @function Feature:unset_channel_list
--- Set the value of the bits in the CHANNEL_LIST field to 0
Feature.unset_channel_list = function(self)
  self.value = self.value & (~self.CHANNEL_LIST & self.BASE_MASK)
end
--- @function Feature:is_lineup_info_set
--- @return boolean True if the value of LINEUP_INFO is non-zero
Feature.is_lineup_info_set = function(self)
  return (self.value & self.LINEUP_INFO) ~= 0
end

--- @function Feature:set_lineup_info
--- Set the value of the bit in the LINEUP_INFO field to 1
Feature.set_lineup_info = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LINEUP_INFO
  else
    self.value = self.LINEUP_INFO
  end
end

--- @function Feature:unset_lineup_info
--- Set the value of the bits in the LINEUP_INFO field to 0
Feature.unset_lineup_info = function(self)
  self.value = self.value & (~self.LINEUP_INFO & self.BASE_MASK)
end
--- @function Feature:is_electronic_guide_set
--- @return boolean True if the value of ELECTRONIC_GUIDE is non-zero
Feature.is_electronic_guide_set = function(self)
  return (self.value & self.ELECTRONIC_GUIDE) ~= 0
end

--- @function Feature:set_electronic_guide
--- Set the value of the bit in the ELECTRONIC_GUIDE field to 1
Feature.set_electronic_guide = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ELECTRONIC_GUIDE
  else
    self.value = self.ELECTRONIC_GUIDE
  end
end

--- @function Feature:unset_electronic_guide
--- Set the value of the bits in the ELECTRONIC_GUIDE field to 0
Feature.unset_electronic_guide = function(self)
  self.value = self.value & (~self.ELECTRONIC_GUIDE & self.BASE_MASK)
end
--- @function Feature:is_record_program_set
--- @return boolean True if the value of RECORD_PROGRAM is non-zero
Feature.is_record_program_set = function(self)
  return (self.value & self.RECORD_PROGRAM) ~= 0
end

--- @function Feature:set_record_program
--- Set the value of the bit in the RECORD_PROGRAM field to 1
Feature.set_record_program = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RECORD_PROGRAM
  else
    self.value = self.RECORD_PROGRAM
  end
end

--- @function Feature:unset_record_program
--- Set the value of the bits in the RECORD_PROGRAM field to 0
Feature.unset_record_program = function(self)
  self.value = self.value & (~self.RECORD_PROGRAM & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.CHANNEL_LIST |
    Feature.LINEUP_INFO |
    Feature.ELECTRONIC_GUIDE |
    Feature.RECORD_PROGRAM
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_channel_list_set = Feature.is_channel_list_set,
  set_channel_list = Feature.set_channel_list,
  unset_channel_list = Feature.unset_channel_list,
  is_lineup_info_set = Feature.is_lineup_info_set,
  set_lineup_info = Feature.set_lineup_info,
  unset_lineup_info = Feature.unset_lineup_info,
  is_electronic_guide_set = Feature.is_electronic_guide_set,
  set_electronic_guide = Feature.set_electronic_guide,
  unset_electronic_guide = Feature.unset_electronic_guide,
  is_record_program_set = Feature.is_record_program_set,
  set_record_program = Feature.set_record_program,
  unset_record_program = Feature.unset_record_program,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.Channel.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


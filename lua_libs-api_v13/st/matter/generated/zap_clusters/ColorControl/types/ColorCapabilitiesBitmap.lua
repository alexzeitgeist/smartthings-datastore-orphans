-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ColorControl.types.ColorCapabilitiesBitmap
--- @alias ColorCapabilitiesBitmap
---
--- @field public HUE_SATURATION number 1
--- @field public ENHANCED_HUE number 2
--- @field public COLOR_LOOP number 4
--- @field public XY number 8
--- @field public COLOR_TEMPERATURE number 16

local ColorCapabilitiesBitmap = {}
local new_mt = UintABC.new_mt({NAME = "ColorCapabilitiesBitmap", ID = data_types.name_to_id_map["Uint16"]}, 2)

ColorCapabilitiesBitmap.BASE_MASK = 0xFFFF
ColorCapabilitiesBitmap.HUE_SATURATION = 0x0001
ColorCapabilitiesBitmap.ENHANCED_HUE = 0x0002
ColorCapabilitiesBitmap.COLOR_LOOP = 0x0004
ColorCapabilitiesBitmap.XY = 0x0008
ColorCapabilitiesBitmap.COLOR_TEMPERATURE = 0x0010

ColorCapabilitiesBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  HUE_SATURATION = 0x0001,
  ENHANCED_HUE = 0x0002,
  COLOR_LOOP = 0x0004,
  XY = 0x0008,
  COLOR_TEMPERATURE = 0x0010,
}

--- @function ColorCapabilitiesBitmap:is_hue_saturation_set
--- @return boolean True if the value of HUE_SATURATION is non-zero
ColorCapabilitiesBitmap.is_hue_saturation_set = function(self)
  return (self.value & self.HUE_SATURATION) ~= 0
end

--- @function ColorCapabilitiesBitmap:set_hue_saturation
--- Set the value of the bit in the HUE_SATURATION field to 1
ColorCapabilitiesBitmap.set_hue_saturation = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HUE_SATURATION
  else
    self.value = self.HUE_SATURATION
  end
end

--- @function ColorCapabilitiesBitmap:unset_hue_saturation
--- Set the value of the bits in the HUE_SATURATION field to 0
ColorCapabilitiesBitmap.unset_hue_saturation = function(self)
  self.value = self.value & (~self.HUE_SATURATION & self.BASE_MASK)
end
--- @function ColorCapabilitiesBitmap:is_enhanced_hue_set
--- @return boolean True if the value of ENHANCED_HUE is non-zero
ColorCapabilitiesBitmap.is_enhanced_hue_set = function(self)
  return (self.value & self.ENHANCED_HUE) ~= 0
end

--- @function ColorCapabilitiesBitmap:set_enhanced_hue
--- Set the value of the bit in the ENHANCED_HUE field to 1
ColorCapabilitiesBitmap.set_enhanced_hue = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ENHANCED_HUE
  else
    self.value = self.ENHANCED_HUE
  end
end

--- @function ColorCapabilitiesBitmap:unset_enhanced_hue
--- Set the value of the bits in the ENHANCED_HUE field to 0
ColorCapabilitiesBitmap.unset_enhanced_hue = function(self)
  self.value = self.value & (~self.ENHANCED_HUE & self.BASE_MASK)
end
--- @function ColorCapabilitiesBitmap:is_color_loop_set
--- @return boolean True if the value of COLOR_LOOP is non-zero
ColorCapabilitiesBitmap.is_color_loop_set = function(self)
  return (self.value & self.COLOR_LOOP) ~= 0
end

--- @function ColorCapabilitiesBitmap:set_color_loop
--- Set the value of the bit in the COLOR_LOOP field to 1
ColorCapabilitiesBitmap.set_color_loop = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COLOR_LOOP
  else
    self.value = self.COLOR_LOOP
  end
end

--- @function ColorCapabilitiesBitmap:unset_color_loop
--- Set the value of the bits in the COLOR_LOOP field to 0
ColorCapabilitiesBitmap.unset_color_loop = function(self)
  self.value = self.value & (~self.COLOR_LOOP & self.BASE_MASK)
end
--- @function ColorCapabilitiesBitmap:is_xy_set
--- @return boolean True if the value of XY is non-zero
ColorCapabilitiesBitmap.is_xy_set = function(self)
  return (self.value & self.XY) ~= 0
end

--- @function ColorCapabilitiesBitmap:set_xy
--- Set the value of the bit in the XY field to 1
ColorCapabilitiesBitmap.set_xy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.XY
  else
    self.value = self.XY
  end
end

--- @function ColorCapabilitiesBitmap:unset_xy
--- Set the value of the bits in the XY field to 0
ColorCapabilitiesBitmap.unset_xy = function(self)
  self.value = self.value & (~self.XY & self.BASE_MASK)
end
--- @function ColorCapabilitiesBitmap:is_color_temperature_set
--- @return boolean True if the value of COLOR_TEMPERATURE is non-zero
ColorCapabilitiesBitmap.is_color_temperature_set = function(self)
  return (self.value & self.COLOR_TEMPERATURE) ~= 0
end

--- @function ColorCapabilitiesBitmap:set_color_temperature
--- Set the value of the bit in the COLOR_TEMPERATURE field to 1
ColorCapabilitiesBitmap.set_color_temperature = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COLOR_TEMPERATURE
  else
    self.value = self.COLOR_TEMPERATURE
  end
end

--- @function ColorCapabilitiesBitmap:unset_color_temperature
--- Set the value of the bits in the COLOR_TEMPERATURE field to 0
ColorCapabilitiesBitmap.unset_color_temperature = function(self)
  self.value = self.value & (~self.COLOR_TEMPERATURE & self.BASE_MASK)
end


ColorCapabilitiesBitmap.mask_methods = {
  is_hue_saturation_set = ColorCapabilitiesBitmap.is_hue_saturation_set,
  set_hue_saturation = ColorCapabilitiesBitmap.set_hue_saturation,
  unset_hue_saturation = ColorCapabilitiesBitmap.unset_hue_saturation,
  is_enhanced_hue_set = ColorCapabilitiesBitmap.is_enhanced_hue_set,
  set_enhanced_hue = ColorCapabilitiesBitmap.set_enhanced_hue,
  unset_enhanced_hue = ColorCapabilitiesBitmap.unset_enhanced_hue,
  is_color_loop_set = ColorCapabilitiesBitmap.is_color_loop_set,
  set_color_loop = ColorCapabilitiesBitmap.set_color_loop,
  unset_color_loop = ColorCapabilitiesBitmap.unset_color_loop,
  is_xy_set = ColorCapabilitiesBitmap.is_xy_set,
  set_xy = ColorCapabilitiesBitmap.set_xy,
  unset_xy = ColorCapabilitiesBitmap.unset_xy,
  is_color_temperature_set = ColorCapabilitiesBitmap.is_color_temperature_set,
  set_color_temperature = ColorCapabilitiesBitmap.set_color_temperature,
  unset_color_temperature = ColorCapabilitiesBitmap.unset_color_temperature,
}

ColorCapabilitiesBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ColorCapabilitiesBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ColorControl.types.ColorCapabilitiesBitmap")
if has_aliases then
  aliases:add_to_class(ColorCapabilitiesBitmap)
end

return ColorCapabilitiesBitmap


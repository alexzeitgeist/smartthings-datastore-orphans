-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ColorControl.types.OptionsBitmap
--- @alias OptionsBitmap
---
--- @field public EXECUTE_IF_OFF number 1

local OptionsBitmap = {}
local new_mt = UintABC.new_mt({NAME = "OptionsBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

OptionsBitmap.BASE_MASK = 0xFFFF
OptionsBitmap.EXECUTE_IF_OFF = 0x0001

OptionsBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  EXECUTE_IF_OFF = 0x0001,
}

--- @function OptionsBitmap:is_execute_if_off_set
--- @return boolean True if the value of EXECUTE_IF_OFF is non-zero
OptionsBitmap.is_execute_if_off_set = function(self)
  return (self.value & self.EXECUTE_IF_OFF) ~= 0
end

--- @function OptionsBitmap:set_execute_if_off
--- Set the value of the bit in the EXECUTE_IF_OFF field to 1
OptionsBitmap.set_execute_if_off = function(self)
  if self.value ~= nil then
    self.value = self.value | self.EXECUTE_IF_OFF
  else
    self.value = self.EXECUTE_IF_OFF
  end
end

--- @function OptionsBitmap:unset_execute_if_off
--- Set the value of the bits in the EXECUTE_IF_OFF field to 0
OptionsBitmap.unset_execute_if_off = function(self)
  self.value = self.value & (~self.EXECUTE_IF_OFF & self.BASE_MASK)
end


OptionsBitmap.mask_methods = {
  is_execute_if_off_set = OptionsBitmap.is_execute_if_off_set,
  set_execute_if_off = OptionsBitmap.set_execute_if_off,
  unset_execute_if_off = OptionsBitmap.unset_execute_if_off,
}

OptionsBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(OptionsBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ColorControl.types.OptionsBitmap")
if has_aliases then
  aliases:add_to_class(OptionsBitmap)
end

return OptionsBitmap


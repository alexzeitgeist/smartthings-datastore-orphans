-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local types_mt = {}
types_mt.__types_cache = {}
types_mt.__index = function(self, key)
  if types_mt.__types_cache[key] == nil then
    types_mt.__types_cache[key] = require("st.matter.generated.zap_clusters.ColorControl.types." .. key)
  end
  return types_mt.__types_cache[key]
end

--- @class st.matter.generated.zap_clusters.ColorControlTypes
---
--- @field public ColorLoopActionEnum st.matter.generated.zap_clusters.ColorControl.types.ColorLoopActionEnum
--- @field public ColorLoopDirectionEnum st.matter.generated.zap_clusters.ColorControl.types.ColorLoopDirectionEnum
--- @field public ColorModeEnum st.matter.generated.zap_clusters.ColorControl.types.ColorModeEnum
--- @field public DirectionEnum st.matter.generated.zap_clusters.ColorControl.types.DirectionEnum
--- @field public DriftCompensationEnum st.matter.generated.zap_clusters.ColorControl.types.DriftCompensationEnum
--- @field public EnhancedColorModeEnum st.matter.generated.zap_clusters.ColorControl.types.EnhancedColorModeEnum
--- @field public MoveModeEnum st.matter.generated.zap_clusters.ColorControl.types.MoveModeEnum
--- @field public StepModeEnum st.matter.generated.zap_clusters.ColorControl.types.StepModeEnum

--- @field public ColorCapabilitiesBitmap st.matter.generated.zap_clusters.ColorControl.types.ColorCapabilitiesBitmap
--- @field public Feature st.matter.generated.zap_clusters.ColorControl.types.Feature
--- @field public OptionsBitmap st.matter.generated.zap_clusters.ColorControl.types.OptionsBitmap
--- @field public UpdateFlagsBitmap st.matter.generated.zap_clusters.ColorControl.types.UpdateFlagsBitmap
local ColorControlTypes = {}

setmetatable(ColorControlTypes, types_mt)

local status, aliases = pcall(require, "st.matter.clusters.aliases.ColorControl.types")
if status then
  aliases:add_to_class(ColorControlTypes)
end

return ColorControlTypes


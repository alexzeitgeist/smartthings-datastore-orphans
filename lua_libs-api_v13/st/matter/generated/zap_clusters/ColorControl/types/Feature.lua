-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ColorControl.types.Feature
--- @alias Feature
---
--- @field public HUE_AND_SATURATION number 1
--- @field public ENHANCED_HUE number 2
--- @field public COLOR_LOOP number 4
--- @field public XY number 8
--- @field public COLOR_TEMPERATURE number 16

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.HUE_AND_SATURATION = 0x0001
Feature.ENHANCED_HUE = 0x0002
Feature.COLOR_LOOP = 0x0004
Feature.XY = 0x0008
Feature.COLOR_TEMPERATURE = 0x0010

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  HUE_AND_SATURATION = 0x0001,
  ENHANCED_HUE = 0x0002,
  COLOR_LOOP = 0x0004,
  XY = 0x0008,
  COLOR_TEMPERATURE = 0x0010,
}

--- @function Feature:is_hue_and_saturation_set
--- @return boolean True if the value of HUE_AND_SATURATION is non-zero
Feature.is_hue_and_saturation_set = function(self)
  return (self.value & self.HUE_AND_SATURATION) ~= 0
end

--- @function Feature:set_hue_and_saturation
--- Set the value of the bit in the HUE_AND_SATURATION field to 1
Feature.set_hue_and_saturation = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HUE_AND_SATURATION
  else
    self.value = self.HUE_AND_SATURATION
  end
end

--- @function Feature:unset_hue_and_saturation
--- Set the value of the bits in the HUE_AND_SATURATION field to 0
Feature.unset_hue_and_saturation = function(self)
  self.value = self.value & (~self.HUE_AND_SATURATION & self.BASE_MASK)
end
--- @function Feature:is_enhanced_hue_set
--- @return boolean True if the value of ENHANCED_HUE is non-zero
Feature.is_enhanced_hue_set = function(self)
  return (self.value & self.ENHANCED_HUE) ~= 0
end

--- @function Feature:set_enhanced_hue
--- Set the value of the bit in the ENHANCED_HUE field to 1
Feature.set_enhanced_hue = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ENHANCED_HUE
  else
    self.value = self.ENHANCED_HUE
  end
end

--- @function Feature:unset_enhanced_hue
--- Set the value of the bits in the ENHANCED_HUE field to 0
Feature.unset_enhanced_hue = function(self)
  self.value = self.value & (~self.ENHANCED_HUE & self.BASE_MASK)
end
--- @function Feature:is_color_loop_set
--- @return boolean True if the value of COLOR_LOOP is non-zero
Feature.is_color_loop_set = function(self)
  return (self.value & self.COLOR_LOOP) ~= 0
end

--- @function Feature:set_color_loop
--- Set the value of the bit in the COLOR_LOOP field to 1
Feature.set_color_loop = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COLOR_LOOP
  else
    self.value = self.COLOR_LOOP
  end
end

--- @function Feature:unset_color_loop
--- Set the value of the bits in the COLOR_LOOP field to 0
Feature.unset_color_loop = function(self)
  self.value = self.value & (~self.COLOR_LOOP & self.BASE_MASK)
end
--- @function Feature:is_xy_set
--- @return boolean True if the value of XY is non-zero
Feature.is_xy_set = function(self)
  return (self.value & self.XY) ~= 0
end

--- @function Feature:set_xy
--- Set the value of the bit in the XY field to 1
Feature.set_xy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.XY
  else
    self.value = self.XY
  end
end

--- @function Feature:unset_xy
--- Set the value of the bits in the XY field to 0
Feature.unset_xy = function(self)
  self.value = self.value & (~self.XY & self.BASE_MASK)
end
--- @function Feature:is_color_temperature_set
--- @return boolean True if the value of COLOR_TEMPERATURE is non-zero
Feature.is_color_temperature_set = function(self)
  return (self.value & self.COLOR_TEMPERATURE) ~= 0
end

--- @function Feature:set_color_temperature
--- Set the value of the bit in the COLOR_TEMPERATURE field to 1
Feature.set_color_temperature = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COLOR_TEMPERATURE
  else
    self.value = self.COLOR_TEMPERATURE
  end
end

--- @function Feature:unset_color_temperature
--- Set the value of the bits in the COLOR_TEMPERATURE field to 0
Feature.unset_color_temperature = function(self)
  self.value = self.value & (~self.COLOR_TEMPERATURE & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.HUE_AND_SATURATION |
    Feature.ENHANCED_HUE |
    Feature.COLOR_LOOP |
    Feature.XY |
    Feature.COLOR_TEMPERATURE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_hue_and_saturation_set = Feature.is_hue_and_saturation_set,
  set_hue_and_saturation = Feature.set_hue_and_saturation,
  unset_hue_and_saturation = Feature.unset_hue_and_saturation,
  is_enhanced_hue_set = Feature.is_enhanced_hue_set,
  set_enhanced_hue = Feature.set_enhanced_hue,
  unset_enhanced_hue = Feature.unset_enhanced_hue,
  is_color_loop_set = Feature.is_color_loop_set,
  set_color_loop = Feature.set_color_loop,
  unset_color_loop = Feature.unset_color_loop,
  is_xy_set = Feature.is_xy_set,
  set_xy = Feature.set_xy,
  unset_xy = Feature.unset_xy,
  is_color_temperature_set = Feature.is_color_temperature_set,
  set_color_temperature = Feature.set_color_temperature,
  unset_color_temperature = Feature.unset_color_temperature,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ColorControl.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


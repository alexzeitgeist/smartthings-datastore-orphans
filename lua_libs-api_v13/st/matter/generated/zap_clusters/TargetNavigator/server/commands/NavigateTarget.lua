-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local log = require "log"
local TLVParser = require "st.matter.TLV.TLVParser"

-----------------------------------------------------------
-- TargetNavigator command NavigateTarget
-----------------------------------------------------------

--- @class st.matter.clusters.TargetNavigator.NavigateTarget
--- @alias NavigateTarget
---
--- @field public ID number 0x0000 the ID of this command
--- @field public NAME string "NavigateTarget" the name of this command
--- @field public target st.matter.data_types.Uint8
--- @field public data st.matter.data_types.UTF8String1
local NavigateTarget = {}

NavigateTarget.NAME = "NavigateTarget"
NavigateTarget.ID = 0x0000
NavigateTarget.field_defs = {
  {
    name = "target",
    field_id = 0,
    is_nullable = false,
    is_optional = false,
    data_type = require "st.matter.data_types.Uint8",
  },
  {
    name = "data",
    field_id = 1,
    is_nullable = false,
    is_optional = true,
    data_type = require "st.matter.data_types.UTF8String1",
  },
}

--- Refer to NavigateTargetResponse:build_test_command_response for
--- building a test command reponse for the driver integration testing framework

--- Initialize the NavigateTarget command
---
--- @param self NavigateTarget the template class for this command
--- @param device st.matter.Device the device to build this message to
--- @param target st.matter.data_types.Uint8
--- @param data st.matter.data_types.UTF8String1

--- @return st.matter.interaction_model.InteractionRequest of type INVOKE
function NavigateTarget:init(device, endpoint_id, target, data)
  local out = {}
  local args = {target, data}
  if #args > #self.field_defs then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.field_defs) do
    if v.is_optional and args[i] == nil then
      out[v.name] = nil
    elseif v.is_nullable and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(args[i], data_types.Null, v.name)
      out[v.name].field_id = v.field_id
    elseif not v.is_optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)
      out[v.name].field_id = v.field_id
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
      out[v.name].field_id = v.field_id
    end
  end
  setmetatable(out, {
    __index = NavigateTarget,
    __tostring = NavigateTarget.pretty_print
  })
  return self._cluster:build_cluster_command(
    device,
    out,
    endpoint_id,
    self._cluster.ID,
    self.ID
  )
end

function NavigateTarget:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

--- Add field names to each command field
---
--- @param base_type_obj st.matter.data_types.Structure
function NavigateTarget:augment_type(base_type_obj)
  local elems = {}
  for _, v in ipairs(base_type_obj.elements) do
    for _, field_def in ipairs(self.field_defs) do
      if field_def.field_id == v.field_id and
         field_def.is_nullable and
         (v.value == nil and v.elements == nil) then
        elems[field_def.name] = data_types.validate_or_build_type(v, data_types.Null, field_def.field_name)
      elseif field_def.field_id == v.field_id and not
        (field_def.is_optional and v.value == nil) then
        elems[field_def.name] = data_types.validate_or_build_type(v, field_def.data_type, field_def.field_name)
        if field_def.element_type ~= nil then
          for i, e in ipairs(elems[field_def.name].elements) do
            elems[field_def.name].elements[i] = data_types.validate_or_build_type(e, field_def.element_type)
          end
        end
      end
    end
  end
  base_type_obj.elements = elems
end

function NavigateTarget:deserialize(tlv_buf)
  local data = TLVParser.decode_tlv(tlv_buf)
  self:augment_type(data)
  return data
end

setmetatable(NavigateTarget, {__call = NavigateTarget.init})

return NavigateTarget


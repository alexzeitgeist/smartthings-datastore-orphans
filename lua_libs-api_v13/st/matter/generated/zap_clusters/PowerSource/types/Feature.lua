-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.PowerSource.types.Feature
--- @alias Feature
---
--- @field public WIRED number 1
--- @field public BATTERY number 2
--- @field public RECHARGEABLE number 4
--- @field public REPLACEABLE number 8

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.WIRED = 0x0001
Feature.BATTERY = 0x0002
Feature.RECHARGEABLE = 0x0004
Feature.REPLACEABLE = 0x0008

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  WIRED = 0x0001,
  BATTERY = 0x0002,
  RECHARGEABLE = 0x0004,
  REPLACEABLE = 0x0008,
}

--- @function Feature:is_wired_set
--- @return boolean True if the value of WIRED is non-zero
Feature.is_wired_set = function(self)
  return (self.value & self.WIRED) ~= 0
end

--- @function Feature:set_wired
--- Set the value of the bit in the WIRED field to 1
Feature.set_wired = function(self)
  if self.value ~= nil then
    self.value = self.value | self.WIRED
  else
    self.value = self.WIRED
  end
end

--- @function Feature:unset_wired
--- Set the value of the bits in the WIRED field to 0
Feature.unset_wired = function(self)
  self.value = self.value & (~self.WIRED & self.BASE_MASK)
end
--- @function Feature:is_battery_set
--- @return boolean True if the value of BATTERY is non-zero
Feature.is_battery_set = function(self)
  return (self.value & self.BATTERY) ~= 0
end

--- @function Feature:set_battery
--- Set the value of the bit in the BATTERY field to 1
Feature.set_battery = function(self)
  if self.value ~= nil then
    self.value = self.value | self.BATTERY
  else
    self.value = self.BATTERY
  end
end

--- @function Feature:unset_battery
--- Set the value of the bits in the BATTERY field to 0
Feature.unset_battery = function(self)
  self.value = self.value & (~self.BATTERY & self.BASE_MASK)
end
--- @function Feature:is_rechargeable_set
--- @return boolean True if the value of RECHARGEABLE is non-zero
Feature.is_rechargeable_set = function(self)
  return (self.value & self.RECHARGEABLE) ~= 0
end

--- @function Feature:set_rechargeable
--- Set the value of the bit in the RECHARGEABLE field to 1
Feature.set_rechargeable = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RECHARGEABLE
  else
    self.value = self.RECHARGEABLE
  end
end

--- @function Feature:unset_rechargeable
--- Set the value of the bits in the RECHARGEABLE field to 0
Feature.unset_rechargeable = function(self)
  self.value = self.value & (~self.RECHARGEABLE & self.BASE_MASK)
end
--- @function Feature:is_replaceable_set
--- @return boolean True if the value of REPLACEABLE is non-zero
Feature.is_replaceable_set = function(self)
  return (self.value & self.REPLACEABLE) ~= 0
end

--- @function Feature:set_replaceable
--- Set the value of the bit in the REPLACEABLE field to 1
Feature.set_replaceable = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REPLACEABLE
  else
    self.value = self.REPLACEABLE
  end
end

--- @function Feature:unset_replaceable
--- Set the value of the bits in the REPLACEABLE field to 0
Feature.unset_replaceable = function(self)
  self.value = self.value & (~self.REPLACEABLE & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.WIRED |
    Feature.BATTERY |
    Feature.RECHARGEABLE |
    Feature.REPLACEABLE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_wired_set = Feature.is_wired_set,
  set_wired = Feature.set_wired,
  unset_wired = Feature.unset_wired,
  is_battery_set = Feature.is_battery_set,
  set_battery = Feature.set_battery,
  unset_battery = Feature.unset_battery,
  is_rechargeable_set = Feature.is_rechargeable_set,
  set_rechargeable = Feature.set_rechargeable,
  unset_rechargeable = Feature.unset_rechargeable,
  is_replaceable_set = Feature.is_replaceable_set,
  set_replaceable = Feature.set_replaceable,
  unset_replaceable = Feature.unset_replaceable,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.PowerSource.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


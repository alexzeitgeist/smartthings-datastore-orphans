-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local ApplicationBasicServerAttributes = require "st.matter.generated.zap_clusters.ApplicationBasic.server.attributes"
local ApplicationBasicServerCommands = require "st.matter.generated.zap_clusters.ApplicationBasic.server.commands"
local ApplicationBasicTypes = require "st.matter.generated.zap_clusters.ApplicationBasic.types"

--- @class st.matter.generated.zap_clusters.ApplicationBasic
--- @alias ApplicationBasic
---
--- @field public ID number 0x050D the ID of this cluster
--- @field public NAME string "ApplicationBasic" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.ApplicationBasicServerAttributes | st.matter.generated.zap_clusters.ApplicationBasicClientAttributes
--- @field public commands st.matter.generated.zap_clusters.ApplicationBasicServerCommands | st.matter.generated.zap_clusters.ApplicationBasicClientCommands
--- @field public types st.matter.generated.zap_clusters.ApplicationBasicTypes

local ApplicationBasic = {}

ApplicationBasic.ID = 0x050D
ApplicationBasic.NAME = "ApplicationBasic"
ApplicationBasic.server = {}
ApplicationBasic.client = {}
ApplicationBasic.server.attributes = ApplicationBasicServerAttributes:set_parent_cluster(ApplicationBasic)
ApplicationBasic.server.commands = ApplicationBasicServerCommands:set_parent_cluster(ApplicationBasic)
ApplicationBasic.types = ApplicationBasicTypes

--- Find an attribute by id
---
--- @param attr_id number
function ApplicationBasic:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "VendorName",
    [0x0001] = "VendorID",
    [0x0002] = "ApplicationName",
    [0x0003] = "ProductID",
    [0x0004] = "Application",
    [0x0005] = "Status",
    [0x0006] = "ApplicationVersion",
    [0x0007] = "AllowedVendorList",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function ApplicationBasic:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
ApplicationBasic.attribute_direction_map = {
  ["VendorName"] = "server",
  ["VendorID"] = "server",
  ["ApplicationName"] = "server",
  ["ProductID"] = "server",
  ["Application"] = "server",
  ["Status"] = "server",
  ["ApplicationVersion"] = "server",
  ["AllowedVendorList"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ApplicationBasic.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      ApplicationBasic.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
ApplicationBasic.command_direction_map = {
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ApplicationBasic.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      ApplicationBasic.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ApplicationBasic.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      ApplicationBasic.command_direction_map[alias] = "client"
    end
  end
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = ApplicationBasic.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, ApplicationBasic.NAME))
  end
  return ApplicationBasic[direction].attributes[key]
end
ApplicationBasic.attributes = {}
setmetatable(ApplicationBasic.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = ApplicationBasic.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, ApplicationBasic.NAME))
  end
  return ApplicationBasic[direction].commands[key]
end
ApplicationBasic.commands = {}
setmetatable(ApplicationBasic.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return ApplicationBasic.server.events[key]
end
ApplicationBasic.events = {}
setmetatable(ApplicationBasic.events, event_helper_mt)

setmetatable(ApplicationBasic, {__index = cluster_base})

return ApplicationBasic


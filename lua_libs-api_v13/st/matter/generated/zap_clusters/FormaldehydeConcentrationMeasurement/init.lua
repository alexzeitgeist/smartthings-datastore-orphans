-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local FormaldehydeConcentrationMeasurementServerAttributes = require "st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurement.server.attributes"
local FormaldehydeConcentrationMeasurementServerCommands = require "st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurement.server.commands"
local FormaldehydeConcentrationMeasurementTypes = require "st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurement.types"

--- @class st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurement
--- @alias FormaldehydeConcentrationMeasurement
---
--- @field public ID number 0x042B the ID of this cluster
--- @field public NAME string "FormaldehydeConcentrationMeasurement" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurementServerAttributes | st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurementClientAttributes
--- @field public commands st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurementServerCommands | st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurementClientCommands
--- @field public types st.matter.generated.zap_clusters.FormaldehydeConcentrationMeasurementTypes

local FormaldehydeConcentrationMeasurement = {}

FormaldehydeConcentrationMeasurement.ID = 0x042B
FormaldehydeConcentrationMeasurement.NAME = "FormaldehydeConcentrationMeasurement"
FormaldehydeConcentrationMeasurement.server = {}
FormaldehydeConcentrationMeasurement.client = {}
FormaldehydeConcentrationMeasurement.server.attributes = FormaldehydeConcentrationMeasurementServerAttributes:set_parent_cluster(FormaldehydeConcentrationMeasurement)
FormaldehydeConcentrationMeasurement.server.commands = FormaldehydeConcentrationMeasurementServerCommands:set_parent_cluster(FormaldehydeConcentrationMeasurement)
FormaldehydeConcentrationMeasurement.types = FormaldehydeConcentrationMeasurementTypes

--- Find an attribute by id
---
--- @param attr_id number
function FormaldehydeConcentrationMeasurement:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "MeasuredValue",
    [0x0001] = "MinMeasuredValue",
    [0x0002] = "MaxMeasuredValue",
    [0x0003] = "PeakMeasuredValue",
    [0x0004] = "PeakMeasuredValueWindow",
    [0x0005] = "AverageMeasuredValue",
    [0x0006] = "AverageMeasuredValueWindow",
    [0x0007] = "Uncertainty",
    [0x0008] = "MeasurementUnit",
    [0x0009] = "MeasurementMedium",
    [0x000A] = "LevelValue",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function FormaldehydeConcentrationMeasurement:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
FormaldehydeConcentrationMeasurement.attribute_direction_map = {
  ["MeasuredValue"] = "server",
  ["MinMeasuredValue"] = "server",
  ["MaxMeasuredValue"] = "server",
  ["PeakMeasuredValue"] = "server",
  ["PeakMeasuredValueWindow"] = "server",
  ["AverageMeasuredValue"] = "server",
  ["AverageMeasuredValueWindow"] = "server",
  ["Uncertainty"] = "server",
  ["MeasurementUnit"] = "server",
  ["MeasurementMedium"] = "server",
  ["LevelValue"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.FormaldehydeConcentrationMeasurement.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      FormaldehydeConcentrationMeasurement.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
FormaldehydeConcentrationMeasurement.command_direction_map = {
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.FormaldehydeConcentrationMeasurement.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      FormaldehydeConcentrationMeasurement.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.FormaldehydeConcentrationMeasurement.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      FormaldehydeConcentrationMeasurement.command_direction_map[alias] = "client"
    end
  end
end

FormaldehydeConcentrationMeasurement.FeatureMap = FormaldehydeConcentrationMeasurement.types.Feature

function FormaldehydeConcentrationMeasurement.are_features_supported(feature, feature_map)
  if (FormaldehydeConcentrationMeasurement.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = FormaldehydeConcentrationMeasurement.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, FormaldehydeConcentrationMeasurement.NAME))
  end
  return FormaldehydeConcentrationMeasurement[direction].attributes[key]
end
FormaldehydeConcentrationMeasurement.attributes = {}
setmetatable(FormaldehydeConcentrationMeasurement.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = FormaldehydeConcentrationMeasurement.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, FormaldehydeConcentrationMeasurement.NAME))
  end
  return FormaldehydeConcentrationMeasurement[direction].commands[key]
end
FormaldehydeConcentrationMeasurement.commands = {}
setmetatable(FormaldehydeConcentrationMeasurement.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return FormaldehydeConcentrationMeasurement.server.events[key]
end
FormaldehydeConcentrationMeasurement.events = {}
setmetatable(FormaldehydeConcentrationMeasurement.events, event_helper_mt)

setmetatable(FormaldehydeConcentrationMeasurement, {__index = cluster_base})

return FormaldehydeConcentrationMeasurement


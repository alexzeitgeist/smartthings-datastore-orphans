-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local BasicInformationServerAttributes = require "st.matter.generated.zap_clusters.BasicInformation.server.attributes"
local BasicInformationServerCommands = require "st.matter.generated.zap_clusters.BasicInformation.server.commands"
local BasicInformationEvents = require "st.matter.generated.zap_clusters.BasicInformation.server.events"
local BasicInformationTypes = require "st.matter.generated.zap_clusters.BasicInformation.types"

--- @class st.matter.generated.zap_clusters.BasicInformation
--- @alias BasicInformation
---
--- @field public ID number 0x0028 the ID of this cluster
--- @field public NAME string "BasicInformation" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.BasicInformationServerAttributes | st.matter.generated.zap_clusters.BasicInformationClientAttributes
--- @field public commands st.matter.generated.zap_clusters.BasicInformationServerCommands | st.matter.generated.zap_clusters.BasicInformationClientCommands
--- @field public types st.matter.generated.zap_clusters.BasicInformationTypes

local BasicInformation = {}

BasicInformation.ID = 0x0028
BasicInformation.NAME = "BasicInformation"
BasicInformation.server = {}
BasicInformation.client = {}
BasicInformation.server.attributes = BasicInformationServerAttributes:set_parent_cluster(BasicInformation)
BasicInformation.server.commands = BasicInformationServerCommands:set_parent_cluster(BasicInformation)
BasicInformation.server.events = BasicInformationEvents:set_parent_cluster(BasicInformation)
BasicInformation.types = BasicInformationTypes

--- Find an attribute by id
---
--- @param attr_id number
function BasicInformation:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "DataModelRevision",
    [0x0001] = "VendorName",
    [0x0002] = "VendorID",
    [0x0003] = "ProductName",
    [0x0004] = "ProductID",
    [0x0005] = "NodeLabel",
    [0x0006] = "Location",
    [0x0007] = "HardwareVersion",
    [0x0008] = "HardwareVersionString",
    [0x0009] = "SoftwareVersion",
    [0x000A] = "SoftwareVersionString",
    [0x000B] = "ManufacturingDate",
    [0x000C] = "PartNumber",
    [0x000D] = "ProductURL",
    [0x000E] = "ProductLabel",
    [0x000F] = "SerialNumber",
    [0x0010] = "LocalConfigDisabled",
    [0x0011] = "Reachable",
    [0x0012] = "UniqueID",
    [0x0013] = "CapabilityMinima",
    [0x0014] = "ProductAppearance",
    [0x0015] = "SpecificationVersion",
    [0x0016] = "MaxPathsPerInvoke",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function BasicInformation:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "MfgSpecificPing",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


--- Find an event by id
---
--- @param event_id number
function BasicInformation:get_event_by_id(event_id)
  local event_id_map = {
    [0x0000] = "StartUp",
    [0x0001] = "ShutDown",
    [0x0002] = "Leave",
    [0x0003] = "ReachableChanged",
  }
  if event_id_map[event_id] ~= nil then
    return self.server.events[event_id_map[event_id]]
  end
  return nil
end
-- Attribute Mapping
BasicInformation.attribute_direction_map = {
  ["DataModelRevision"] = "server",
  ["VendorName"] = "server",
  ["VendorID"] = "server",
  ["ProductName"] = "server",
  ["ProductID"] = "server",
  ["NodeLabel"] = "server",
  ["Location"] = "server",
  ["HardwareVersion"] = "server",
  ["HardwareVersionString"] = "server",
  ["SoftwareVersion"] = "server",
  ["SoftwareVersionString"] = "server",
  ["ManufacturingDate"] = "server",
  ["PartNumber"] = "server",
  ["ProductURL"] = "server",
  ["ProductLabel"] = "server",
  ["SerialNumber"] = "server",
  ["LocalConfigDisabled"] = "server",
  ["Reachable"] = "server",
  ["UniqueID"] = "server",
  ["CapabilityMinima"] = "server",
  ["ProductAppearance"] = "server",
  ["SpecificationVersion"] = "server",
  ["MaxPathsPerInvoke"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BasicInformation.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BasicInformation.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
BasicInformation.command_direction_map = {
  ["MfgSpecificPing"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BasicInformation.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BasicInformation.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BasicInformation.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BasicInformation.command_direction_map[alias] = "client"
    end
  end
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = BasicInformation.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, BasicInformation.NAME))
  end
  return BasicInformation[direction].attributes[key]
end
BasicInformation.attributes = {}
setmetatable(BasicInformation.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = BasicInformation.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, BasicInformation.NAME))
  end
  return BasicInformation[direction].commands[key]
end
BasicInformation.commands = {}
setmetatable(BasicInformation.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return BasicInformation.server.events[key]
end
BasicInformation.events = {}
setmetatable(BasicInformation.events, event_helper_mt)

setmetatable(BasicInformation, {__index = cluster_base})

return BasicInformation


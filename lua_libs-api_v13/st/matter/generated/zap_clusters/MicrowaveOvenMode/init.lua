-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local MicrowaveOvenModeServerAttributes = require "st.matter.generated.zap_clusters.MicrowaveOvenMode.server.attributes"
local MicrowaveOvenModeServerCommands = require "st.matter.generated.zap_clusters.MicrowaveOvenMode.server.commands"
local MicrowaveOvenModeTypes = require "st.matter.generated.zap_clusters.MicrowaveOvenMode.types"

--- @class st.matter.generated.zap_clusters.MicrowaveOvenMode
--- @alias MicrowaveOvenMode
---
--- @field public ID number 0x005E the ID of this cluster
--- @field public NAME string "MicrowaveOvenMode" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.MicrowaveOvenModeServerAttributes | st.matter.generated.zap_clusters.MicrowaveOvenModeClientAttributes
--- @field public commands st.matter.generated.zap_clusters.MicrowaveOvenModeServerCommands | st.matter.generated.zap_clusters.MicrowaveOvenModeClientCommands
--- @field public types st.matter.generated.zap_clusters.MicrowaveOvenModeTypes

local MicrowaveOvenMode = {}

MicrowaveOvenMode.ID = 0x005E
MicrowaveOvenMode.NAME = "MicrowaveOvenMode"
MicrowaveOvenMode.server = {}
MicrowaveOvenMode.client = {}
MicrowaveOvenMode.server.attributes = MicrowaveOvenModeServerAttributes:set_parent_cluster(MicrowaveOvenMode)
MicrowaveOvenMode.server.commands = MicrowaveOvenModeServerCommands:set_parent_cluster(MicrowaveOvenMode)
MicrowaveOvenMode.types = MicrowaveOvenModeTypes

--- Find an attribute by id
---
--- @param attr_id number
function MicrowaveOvenMode:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "SupportedModes",
    [0x0001] = "CurrentMode",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function MicrowaveOvenMode:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
MicrowaveOvenMode.attribute_direction_map = {
  ["SupportedModes"] = "server",
  ["CurrentMode"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MicrowaveOvenMode.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      MicrowaveOvenMode.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
MicrowaveOvenMode.command_direction_map = {
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MicrowaveOvenMode.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      MicrowaveOvenMode.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MicrowaveOvenMode.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      MicrowaveOvenMode.command_direction_map[alias] = "client"
    end
  end
end

MicrowaveOvenMode.FeatureMap = MicrowaveOvenMode.types.Feature

function MicrowaveOvenMode.are_features_supported(feature, feature_map)
  if (MicrowaveOvenMode.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = MicrowaveOvenMode.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, MicrowaveOvenMode.NAME))
  end
  return MicrowaveOvenMode[direction].attributes[key]
end
MicrowaveOvenMode.attributes = {}
setmetatable(MicrowaveOvenMode.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = MicrowaveOvenMode.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, MicrowaveOvenMode.NAME))
  end
  return MicrowaveOvenMode[direction].commands[key]
end
MicrowaveOvenMode.commands = {}
setmetatable(MicrowaveOvenMode.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return MicrowaveOvenMode.server.events[key]
end
MicrowaveOvenMode.events = {}
setmetatable(MicrowaveOvenMode.events, event_helper_mt)

setmetatable(MicrowaveOvenMode, {__index = cluster_base})

return MicrowaveOvenMode


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.MediaInput.types.InputTypeEnum: st.matter.data_types.Uint8
--- @alias InputTypeEnum
---
--- @field public byte_length number 1
--- @field public INTERNAL number 0
--- @field public AUX number 1
--- @field public COAX number 2
--- @field public COMPOSITE number 3
--- @field public HDMI number 4
--- @field public INPUT number 5
--- @field public LINE number 6
--- @field public OPTICAL number 7
--- @field public VIDEO number 8
--- @field public SCART number 9
--- @field public USB number 10
--- @field public OTHER number 11

local InputTypeEnum = {}
local new_mt = UintABC.new_mt({NAME = "InputTypeEnum", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.INTERNAL] = "INTERNAL",
    [self.AUX] = "AUX",
    [self.COAX] = "COAX",
    [self.COMPOSITE] = "COMPOSITE",
    [self.HDMI] = "HDMI",
    [self.INPUT] = "INPUT",
    [self.LINE] = "LINE",
    [self.OPTICAL] = "OPTICAL",
    [self.VIDEO] = "VIDEO",
    [self.SCART] = "SCART",
    [self.USB] = "USB",
    [self.OTHER] = "OTHER",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.INTERNAL  = 0x00
new_mt.__index.AUX  = 0x01
new_mt.__index.COAX  = 0x02
new_mt.__index.COMPOSITE  = 0x03
new_mt.__index.HDMI  = 0x04
new_mt.__index.INPUT  = 0x05
new_mt.__index.LINE  = 0x06
new_mt.__index.OPTICAL  = 0x07
new_mt.__index.VIDEO  = 0x08
new_mt.__index.SCART  = 0x09
new_mt.__index.USB  = 0x0A
new_mt.__index.OTHER  = 0x0B

InputTypeEnum.INTERNAL  = 0x00
InputTypeEnum.AUX  = 0x01
InputTypeEnum.COAX  = 0x02
InputTypeEnum.COMPOSITE  = 0x03
InputTypeEnum.HDMI  = 0x04
InputTypeEnum.INPUT  = 0x05
InputTypeEnum.LINE  = 0x06
InputTypeEnum.OPTICAL  = 0x07
InputTypeEnum.VIDEO  = 0x08
InputTypeEnum.SCART  = 0x09
InputTypeEnum.USB  = 0x0A
InputTypeEnum.OTHER  = 0x0B

InputTypeEnum.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(InputTypeEnum, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MediaInput.types.InputTypeEnum")
if has_aliases then
  aliases:add_to_class(InputTypeEnum)
end

return InputTypeEnum


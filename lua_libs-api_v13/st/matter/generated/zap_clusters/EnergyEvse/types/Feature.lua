-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.EnergyEvse.types.Feature
--- @alias Feature
---
--- @field public CHARGING_PREFERENCES number 1
--- @field public SOC_REPORTING number 2
--- @field public PLUG_AND_CHARGE number 4
--- @field public RFID number 8
--- @field public V2X number 16

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.CHARGING_PREFERENCES = 0x0001
Feature.SOC_REPORTING = 0x0002
Feature.PLUG_AND_CHARGE = 0x0004
Feature.RFID = 0x0008
Feature.V2X = 0x0010

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  CHARGING_PREFERENCES = 0x0001,
  SOC_REPORTING = 0x0002,
  PLUG_AND_CHARGE = 0x0004,
  RFID = 0x0008,
  V2X = 0x0010,
}

--- @function Feature:is_charging_preferences_set
--- @return boolean True if the value of CHARGING_PREFERENCES is non-zero
Feature.is_charging_preferences_set = function(self)
  return (self.value & self.CHARGING_PREFERENCES) ~= 0
end

--- @function Feature:set_charging_preferences
--- Set the value of the bit in the CHARGING_PREFERENCES field to 1
Feature.set_charging_preferences = function(self)
  if self.value ~= nil then
    self.value = self.value | self.CHARGING_PREFERENCES
  else
    self.value = self.CHARGING_PREFERENCES
  end
end

--- @function Feature:unset_charging_preferences
--- Set the value of the bits in the CHARGING_PREFERENCES field to 0
Feature.unset_charging_preferences = function(self)
  self.value = self.value & (~self.CHARGING_PREFERENCES & self.BASE_MASK)
end
--- @function Feature:is_soc_reporting_set
--- @return boolean True if the value of SOC_REPORTING is non-zero
Feature.is_soc_reporting_set = function(self)
  return (self.value & self.SOC_REPORTING) ~= 0
end

--- @function Feature:set_soc_reporting
--- Set the value of the bit in the SOC_REPORTING field to 1
Feature.set_soc_reporting = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SOC_REPORTING
  else
    self.value = self.SOC_REPORTING
  end
end

--- @function Feature:unset_soc_reporting
--- Set the value of the bits in the SOC_REPORTING field to 0
Feature.unset_soc_reporting = function(self)
  self.value = self.value & (~self.SOC_REPORTING & self.BASE_MASK)
end
--- @function Feature:is_plug_and_charge_set
--- @return boolean True if the value of PLUG_AND_CHARGE is non-zero
Feature.is_plug_and_charge_set = function(self)
  return (self.value & self.PLUG_AND_CHARGE) ~= 0
end

--- @function Feature:set_plug_and_charge
--- Set the value of the bit in the PLUG_AND_CHARGE field to 1
Feature.set_plug_and_charge = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PLUG_AND_CHARGE
  else
    self.value = self.PLUG_AND_CHARGE
  end
end

--- @function Feature:unset_plug_and_charge
--- Set the value of the bits in the PLUG_AND_CHARGE field to 0
Feature.unset_plug_and_charge = function(self)
  self.value = self.value & (~self.PLUG_AND_CHARGE & self.BASE_MASK)
end
--- @function Feature:is_rfid_set
--- @return boolean True if the value of RFID is non-zero
Feature.is_rfid_set = function(self)
  return (self.value & self.RFID) ~= 0
end

--- @function Feature:set_rfid
--- Set the value of the bit in the RFID field to 1
Feature.set_rfid = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RFID
  else
    self.value = self.RFID
  end
end

--- @function Feature:unset_rfid
--- Set the value of the bits in the RFID field to 0
Feature.unset_rfid = function(self)
  self.value = self.value & (~self.RFID & self.BASE_MASK)
end
--- @function Feature:is_v2x_set
--- @return boolean True if the value of V2X is non-zero
Feature.is_v2x_set = function(self)
  return (self.value & self.V2X) ~= 0
end

--- @function Feature:set_v2x
--- Set the value of the bit in the V2X field to 1
Feature.set_v2x = function(self)
  if self.value ~= nil then
    self.value = self.value | self.V2X
  else
    self.value = self.V2X
  end
end

--- @function Feature:unset_v2x
--- Set the value of the bits in the V2X field to 0
Feature.unset_v2x = function(self)
  self.value = self.value & (~self.V2X & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.CHARGING_PREFERENCES |
    Feature.SOC_REPORTING |
    Feature.PLUG_AND_CHARGE |
    Feature.RFID |
    Feature.V2X
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_charging_preferences_set = Feature.is_charging_preferences_set,
  set_charging_preferences = Feature.set_charging_preferences,
  unset_charging_preferences = Feature.unset_charging_preferences,
  is_soc_reporting_set = Feature.is_soc_reporting_set,
  set_soc_reporting = Feature.set_soc_reporting,
  unset_soc_reporting = Feature.unset_soc_reporting,
  is_plug_and_charge_set = Feature.is_plug_and_charge_set,
  set_plug_and_charge = Feature.set_plug_and_charge,
  unset_plug_and_charge = Feature.unset_plug_and_charge,
  is_rfid_set = Feature.is_rfid_set,
  set_rfid = Feature.set_rfid,
  unset_rfid = Feature.unset_rfid,
  is_v2x_set = Feature.is_v2x_set,
  set_v2x = Feature.set_v2x,
  unset_v2x = Feature.unset_v2x,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.EnergyEvse.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.FanControl.types.Feature
--- @alias Feature
---
--- @field public MULTI_SPEED number 1
--- @field public AUTO number 2
--- @field public ROCKING number 4
--- @field public WIND number 8
--- @field public STEP number 16
--- @field public AIRFLOW_DIRECTION number 32

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.MULTI_SPEED = 0x0001
Feature.AUTO = 0x0002
Feature.ROCKING = 0x0004
Feature.WIND = 0x0008
Feature.STEP = 0x0010
Feature.AIRFLOW_DIRECTION = 0x0020

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  MULTI_SPEED = 0x0001,
  AUTO = 0x0002,
  ROCKING = 0x0004,
  WIND = 0x0008,
  STEP = 0x0010,
  AIRFLOW_DIRECTION = 0x0020,
}

--- @function Feature:is_multi_speed_set
--- @return boolean True if the value of MULTI_SPEED is non-zero
Feature.is_multi_speed_set = function(self)
  return (self.value & self.MULTI_SPEED) ~= 0
end

--- @function Feature:set_multi_speed
--- Set the value of the bit in the MULTI_SPEED field to 1
Feature.set_multi_speed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MULTI_SPEED
  else
    self.value = self.MULTI_SPEED
  end
end

--- @function Feature:unset_multi_speed
--- Set the value of the bits in the MULTI_SPEED field to 0
Feature.unset_multi_speed = function(self)
  self.value = self.value & (~self.MULTI_SPEED & self.BASE_MASK)
end
--- @function Feature:is_auto_set
--- @return boolean True if the value of AUTO is non-zero
Feature.is_auto_set = function(self)
  return (self.value & self.AUTO) ~= 0
end

--- @function Feature:set_auto
--- Set the value of the bit in the AUTO field to 1
Feature.set_auto = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUTO
  else
    self.value = self.AUTO
  end
end

--- @function Feature:unset_auto
--- Set the value of the bits in the AUTO field to 0
Feature.unset_auto = function(self)
  self.value = self.value & (~self.AUTO & self.BASE_MASK)
end
--- @function Feature:is_rocking_set
--- @return boolean True if the value of ROCKING is non-zero
Feature.is_rocking_set = function(self)
  return (self.value & self.ROCKING) ~= 0
end

--- @function Feature:set_rocking
--- Set the value of the bit in the ROCKING field to 1
Feature.set_rocking = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ROCKING
  else
    self.value = self.ROCKING
  end
end

--- @function Feature:unset_rocking
--- Set the value of the bits in the ROCKING field to 0
Feature.unset_rocking = function(self)
  self.value = self.value & (~self.ROCKING & self.BASE_MASK)
end
--- @function Feature:is_wind_set
--- @return boolean True if the value of WIND is non-zero
Feature.is_wind_set = function(self)
  return (self.value & self.WIND) ~= 0
end

--- @function Feature:set_wind
--- Set the value of the bit in the WIND field to 1
Feature.set_wind = function(self)
  if self.value ~= nil then
    self.value = self.value | self.WIND
  else
    self.value = self.WIND
  end
end

--- @function Feature:unset_wind
--- Set the value of the bits in the WIND field to 0
Feature.unset_wind = function(self)
  self.value = self.value & (~self.WIND & self.BASE_MASK)
end
--- @function Feature:is_step_set
--- @return boolean True if the value of STEP is non-zero
Feature.is_step_set = function(self)
  return (self.value & self.STEP) ~= 0
end

--- @function Feature:set_step
--- Set the value of the bit in the STEP field to 1
Feature.set_step = function(self)
  if self.value ~= nil then
    self.value = self.value | self.STEP
  else
    self.value = self.STEP
  end
end

--- @function Feature:unset_step
--- Set the value of the bits in the STEP field to 0
Feature.unset_step = function(self)
  self.value = self.value & (~self.STEP & self.BASE_MASK)
end
--- @function Feature:is_airflow_direction_set
--- @return boolean True if the value of AIRFLOW_DIRECTION is non-zero
Feature.is_airflow_direction_set = function(self)
  return (self.value & self.AIRFLOW_DIRECTION) ~= 0
end

--- @function Feature:set_airflow_direction
--- Set the value of the bit in the AIRFLOW_DIRECTION field to 1
Feature.set_airflow_direction = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AIRFLOW_DIRECTION
  else
    self.value = self.AIRFLOW_DIRECTION
  end
end

--- @function Feature:unset_airflow_direction
--- Set the value of the bits in the AIRFLOW_DIRECTION field to 0
Feature.unset_airflow_direction = function(self)
  self.value = self.value & (~self.AIRFLOW_DIRECTION & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.MULTI_SPEED |
    Feature.AUTO |
    Feature.ROCKING |
    Feature.WIND |
    Feature.STEP |
    Feature.AIRFLOW_DIRECTION
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_multi_speed_set = Feature.is_multi_speed_set,
  set_multi_speed = Feature.set_multi_speed,
  unset_multi_speed = Feature.unset_multi_speed,
  is_auto_set = Feature.is_auto_set,
  set_auto = Feature.set_auto,
  unset_auto = Feature.unset_auto,
  is_rocking_set = Feature.is_rocking_set,
  set_rocking = Feature.set_rocking,
  unset_rocking = Feature.unset_rocking,
  is_wind_set = Feature.is_wind_set,
  set_wind = Feature.set_wind,
  unset_wind = Feature.unset_wind,
  is_step_set = Feature.is_step_set,
  set_step = Feature.set_step,
  unset_step = Feature.unset_step,
  is_airflow_direction_set = Feature.is_airflow_direction_set,
  set_airflow_direction = Feature.set_airflow_direction,
  unset_airflow_direction = Feature.unset_airflow_direction,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.FanControl.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.BooleanStateConfiguration.types.AlarmModeBitmap
--- @alias AlarmModeBitmap
---
--- @field public VISUAL number 1
--- @field public AUDIBLE number 2

local AlarmModeBitmap = {}
local new_mt = UintABC.new_mt({NAME = "AlarmModeBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

AlarmModeBitmap.BASE_MASK = 0xFFFF
AlarmModeBitmap.VISUAL = 0x0001
AlarmModeBitmap.AUDIBLE = 0x0002

AlarmModeBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  VISUAL = 0x0001,
  AUDIBLE = 0x0002,
}

--- @function AlarmModeBitmap:is_visual_set
--- @return boolean True if the value of VISUAL is non-zero
AlarmModeBitmap.is_visual_set = function(self)
  return (self.value & self.VISUAL) ~= 0
end

--- @function AlarmModeBitmap:set_visual
--- Set the value of the bit in the VISUAL field to 1
AlarmModeBitmap.set_visual = function(self)
  if self.value ~= nil then
    self.value = self.value | self.VISUAL
  else
    self.value = self.VISUAL
  end
end

--- @function AlarmModeBitmap:unset_visual
--- Set the value of the bits in the VISUAL field to 0
AlarmModeBitmap.unset_visual = function(self)
  self.value = self.value & (~self.VISUAL & self.BASE_MASK)
end
--- @function AlarmModeBitmap:is_audible_set
--- @return boolean True if the value of AUDIBLE is non-zero
AlarmModeBitmap.is_audible_set = function(self)
  return (self.value & self.AUDIBLE) ~= 0
end

--- @function AlarmModeBitmap:set_audible
--- Set the value of the bit in the AUDIBLE field to 1
AlarmModeBitmap.set_audible = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUDIBLE
  else
    self.value = self.AUDIBLE
  end
end

--- @function AlarmModeBitmap:unset_audible
--- Set the value of the bits in the AUDIBLE field to 0
AlarmModeBitmap.unset_audible = function(self)
  self.value = self.value & (~self.AUDIBLE & self.BASE_MASK)
end


AlarmModeBitmap.mask_methods = {
  is_visual_set = AlarmModeBitmap.is_visual_set,
  set_visual = AlarmModeBitmap.set_visual,
  unset_visual = AlarmModeBitmap.unset_visual,
  is_audible_set = AlarmModeBitmap.is_audible_set,
  set_audible = AlarmModeBitmap.set_audible,
  unset_audible = AlarmModeBitmap.unset_audible,
}

AlarmModeBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(AlarmModeBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BooleanStateConfiguration.types.AlarmModeBitmap")
if has_aliases then
  aliases:add_to_class(AlarmModeBitmap)
end

return AlarmModeBitmap


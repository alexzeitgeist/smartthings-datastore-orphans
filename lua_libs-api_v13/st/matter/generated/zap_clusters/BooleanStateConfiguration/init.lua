-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local BooleanStateConfigurationServerAttributes = require "st.matter.generated.zap_clusters.BooleanStateConfiguration.server.attributes"
local BooleanStateConfigurationServerCommands = require "st.matter.generated.zap_clusters.BooleanStateConfiguration.server.commands"
local BooleanStateConfigurationEvents = require "st.matter.generated.zap_clusters.BooleanStateConfiguration.server.events"
local BooleanStateConfigurationTypes = require "st.matter.generated.zap_clusters.BooleanStateConfiguration.types"

--- @class st.matter.generated.zap_clusters.BooleanStateConfiguration
--- @alias BooleanStateConfiguration
---
--- @field public ID number 0x0080 the ID of this cluster
--- @field public NAME string "BooleanStateConfiguration" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.BooleanStateConfigurationServerAttributes | st.matter.generated.zap_clusters.BooleanStateConfigurationClientAttributes
--- @field public commands st.matter.generated.zap_clusters.BooleanStateConfigurationServerCommands | st.matter.generated.zap_clusters.BooleanStateConfigurationClientCommands
--- @field public types st.matter.generated.zap_clusters.BooleanStateConfigurationTypes

local BooleanStateConfiguration = {}

BooleanStateConfiguration.ID = 0x0080
BooleanStateConfiguration.NAME = "BooleanStateConfiguration"
BooleanStateConfiguration.server = {}
BooleanStateConfiguration.client = {}
BooleanStateConfiguration.server.attributes = BooleanStateConfigurationServerAttributes:set_parent_cluster(BooleanStateConfiguration)
BooleanStateConfiguration.server.commands = BooleanStateConfigurationServerCommands:set_parent_cluster(BooleanStateConfiguration)
BooleanStateConfiguration.server.events = BooleanStateConfigurationEvents:set_parent_cluster(BooleanStateConfiguration)
BooleanStateConfiguration.types = BooleanStateConfigurationTypes

--- Find an attribute by id
---
--- @param attr_id number
function BooleanStateConfiguration:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "CurrentSensitivityLevel",
    [0x0001] = "SupportedSensitivityLevels",
    [0x0002] = "DefaultSensitivityLevel",
    [0x0003] = "AlarmsActive",
    [0x0004] = "AlarmsSuppressed",
    [0x0005] = "AlarmsEnabled",
    [0x0006] = "AlarmsSupported",
    [0x0007] = "SensorFault",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function BooleanStateConfiguration:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "SuppressAlarm",
    [0x0001] = "EnableDisableAlarm",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


--- Find an event by id
---
--- @param event_id number
function BooleanStateConfiguration:get_event_by_id(event_id)
  local event_id_map = {
    [0x0000] = "AlarmsStateChanged",
    [0x0001] = "SensorFault",
  }
  if event_id_map[event_id] ~= nil then
    return self.server.events[event_id_map[event_id]]
  end
  return nil
end
-- Attribute Mapping
BooleanStateConfiguration.attribute_direction_map = {
  ["CurrentSensitivityLevel"] = "server",
  ["SupportedSensitivityLevels"] = "server",
  ["DefaultSensitivityLevel"] = "server",
  ["AlarmsActive"] = "server",
  ["AlarmsSuppressed"] = "server",
  ["AlarmsEnabled"] = "server",
  ["AlarmsSupported"] = "server",
  ["SensorFault"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BooleanStateConfiguration.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BooleanStateConfiguration.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
BooleanStateConfiguration.command_direction_map = {
  ["SuppressAlarm"] = "server",
  ["EnableDisableAlarm"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BooleanStateConfiguration.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BooleanStateConfiguration.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.BooleanStateConfiguration.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      BooleanStateConfiguration.command_direction_map[alias] = "client"
    end
  end
end

BooleanStateConfiguration.FeatureMap = BooleanStateConfiguration.types.Feature

function BooleanStateConfiguration.are_features_supported(feature, feature_map)
  if (BooleanStateConfiguration.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = BooleanStateConfiguration.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, BooleanStateConfiguration.NAME))
  end
  return BooleanStateConfiguration[direction].attributes[key]
end
BooleanStateConfiguration.attributes = {}
setmetatable(BooleanStateConfiguration.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = BooleanStateConfiguration.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, BooleanStateConfiguration.NAME))
  end
  return BooleanStateConfiguration[direction].commands[key]
end
BooleanStateConfiguration.commands = {}
setmetatable(BooleanStateConfiguration.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return BooleanStateConfiguration.server.events[key]
end
BooleanStateConfiguration.events = {}
setmetatable(BooleanStateConfiguration.events, event_helper_mt)

setmetatable(BooleanStateConfiguration, {__index = cluster_base})

return BooleanStateConfiguration


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ThreadBorderRouterManagement.types.Feature
--- @alias Feature
---
--- @field public PAN_CHANGE number 1

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.PAN_CHANGE = 0x0001

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  PAN_CHANGE = 0x0001,
}

--- @function Feature:is_pan_change_set
--- @return boolean True if the value of PAN_CHANGE is non-zero
Feature.is_pan_change_set = function(self)
  return (self.value & self.PAN_CHANGE) ~= 0
end

--- @function Feature:set_pan_change
--- Set the value of the bit in the PAN_CHANGE field to 1
Feature.set_pan_change = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PAN_CHANGE
  else
    self.value = self.PAN_CHANGE
  end
end

--- @function Feature:unset_pan_change
--- Set the value of the bits in the PAN_CHANGE field to 0
Feature.unset_pan_change = function(self)
  self.value = self.value & (~self.PAN_CHANGE & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.PAN_CHANGE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_pan_change_set = Feature.is_pan_change_set,
  set_pan_change = Feature.set_pan_change,
  unset_pan_change = Feature.unset_pan_change,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ThreadBorderRouterManagement.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.MediaPlayback.types.Feature
--- @alias Feature
---
--- @field public ADVANCED_SEEK number 1
--- @field public VARIABLE_SPEED number 2
--- @field public TEXT_TRACKS number 4
--- @field public AUDIO_TRACKS number 8
--- @field public AUDIO_ADVANCE number 16

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.ADVANCED_SEEK = 0x0001
Feature.VARIABLE_SPEED = 0x0002
Feature.TEXT_TRACKS = 0x0004
Feature.AUDIO_TRACKS = 0x0008
Feature.AUDIO_ADVANCE = 0x0010

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  ADVANCED_SEEK = 0x0001,
  VARIABLE_SPEED = 0x0002,
  TEXT_TRACKS = 0x0004,
  AUDIO_TRACKS = 0x0008,
  AUDIO_ADVANCE = 0x0010,
}

--- @function Feature:is_advanced_seek_set
--- @return boolean True if the value of ADVANCED_SEEK is non-zero
Feature.is_advanced_seek_set = function(self)
  return (self.value & self.ADVANCED_SEEK) ~= 0
end

--- @function Feature:set_advanced_seek
--- Set the value of the bit in the ADVANCED_SEEK field to 1
Feature.set_advanced_seek = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ADVANCED_SEEK
  else
    self.value = self.ADVANCED_SEEK
  end
end

--- @function Feature:unset_advanced_seek
--- Set the value of the bits in the ADVANCED_SEEK field to 0
Feature.unset_advanced_seek = function(self)
  self.value = self.value & (~self.ADVANCED_SEEK & self.BASE_MASK)
end
--- @function Feature:is_variable_speed_set
--- @return boolean True if the value of VARIABLE_SPEED is non-zero
Feature.is_variable_speed_set = function(self)
  return (self.value & self.VARIABLE_SPEED) ~= 0
end

--- @function Feature:set_variable_speed
--- Set the value of the bit in the VARIABLE_SPEED field to 1
Feature.set_variable_speed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.VARIABLE_SPEED
  else
    self.value = self.VARIABLE_SPEED
  end
end

--- @function Feature:unset_variable_speed
--- Set the value of the bits in the VARIABLE_SPEED field to 0
Feature.unset_variable_speed = function(self)
  self.value = self.value & (~self.VARIABLE_SPEED & self.BASE_MASK)
end
--- @function Feature:is_text_tracks_set
--- @return boolean True if the value of TEXT_TRACKS is non-zero
Feature.is_text_tracks_set = function(self)
  return (self.value & self.TEXT_TRACKS) ~= 0
end

--- @function Feature:set_text_tracks
--- Set the value of the bit in the TEXT_TRACKS field to 1
Feature.set_text_tracks = function(self)
  if self.value ~= nil then
    self.value = self.value | self.TEXT_TRACKS
  else
    self.value = self.TEXT_TRACKS
  end
end

--- @function Feature:unset_text_tracks
--- Set the value of the bits in the TEXT_TRACKS field to 0
Feature.unset_text_tracks = function(self)
  self.value = self.value & (~self.TEXT_TRACKS & self.BASE_MASK)
end
--- @function Feature:is_audio_tracks_set
--- @return boolean True if the value of AUDIO_TRACKS is non-zero
Feature.is_audio_tracks_set = function(self)
  return (self.value & self.AUDIO_TRACKS) ~= 0
end

--- @function Feature:set_audio_tracks
--- Set the value of the bit in the AUDIO_TRACKS field to 1
Feature.set_audio_tracks = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUDIO_TRACKS
  else
    self.value = self.AUDIO_TRACKS
  end
end

--- @function Feature:unset_audio_tracks
--- Set the value of the bits in the AUDIO_TRACKS field to 0
Feature.unset_audio_tracks = function(self)
  self.value = self.value & (~self.AUDIO_TRACKS & self.BASE_MASK)
end
--- @function Feature:is_audio_advance_set
--- @return boolean True if the value of AUDIO_ADVANCE is non-zero
Feature.is_audio_advance_set = function(self)
  return (self.value & self.AUDIO_ADVANCE) ~= 0
end

--- @function Feature:set_audio_advance
--- Set the value of the bit in the AUDIO_ADVANCE field to 1
Feature.set_audio_advance = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUDIO_ADVANCE
  else
    self.value = self.AUDIO_ADVANCE
  end
end

--- @function Feature:unset_audio_advance
--- Set the value of the bits in the AUDIO_ADVANCE field to 0
Feature.unset_audio_advance = function(self)
  self.value = self.value & (~self.AUDIO_ADVANCE & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.ADVANCED_SEEK |
    Feature.VARIABLE_SPEED |
    Feature.TEXT_TRACKS |
    Feature.AUDIO_TRACKS |
    Feature.AUDIO_ADVANCE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_advanced_seek_set = Feature.is_advanced_seek_set,
  set_advanced_seek = Feature.set_advanced_seek,
  unset_advanced_seek = Feature.unset_advanced_seek,
  is_variable_speed_set = Feature.is_variable_speed_set,
  set_variable_speed = Feature.set_variable_speed,
  unset_variable_speed = Feature.unset_variable_speed,
  is_text_tracks_set = Feature.is_text_tracks_set,
  set_text_tracks = Feature.set_text_tracks,
  unset_text_tracks = Feature.unset_text_tracks,
  is_audio_tracks_set = Feature.is_audio_tracks_set,
  set_audio_tracks = Feature.set_audio_tracks,
  unset_audio_tracks = Feature.unset_audio_tracks,
  is_audio_advance_set = Feature.is_audio_advance_set,
  set_audio_advance = Feature.set_audio_advance,
  unset_audio_advance = Feature.unset_audio_advance,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.MediaPlayback.types.Feature")
if has_aliases then
  aliases:add_to_class(Feature)
end

return Feature


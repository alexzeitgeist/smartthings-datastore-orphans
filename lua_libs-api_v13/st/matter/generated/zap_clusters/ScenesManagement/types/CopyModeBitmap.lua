-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ScenesManagement.types.CopyModeBitmap
--- @alias CopyModeBitmap
---
--- @field public COPY_ALL_SCENES number 1

local CopyModeBitmap = {}
local new_mt = UintABC.new_mt({NAME = "CopyModeBitmap", ID = data_types.name_to_id_map["Uint8"]}, 1)

CopyModeBitmap.BASE_MASK = 0xFFFF
CopyModeBitmap.COPY_ALL_SCENES = 0x0001

CopyModeBitmap.mask_fields = {
  BASE_MASK = 0xFFFF,
  COPY_ALL_SCENES = 0x0001,
}

--- @function CopyModeBitmap:is_copy_all_scenes_set
--- @return boolean True if the value of COPY_ALL_SCENES is non-zero
CopyModeBitmap.is_copy_all_scenes_set = function(self)
  return (self.value & self.COPY_ALL_SCENES) ~= 0
end

--- @function CopyModeBitmap:set_copy_all_scenes
--- Set the value of the bit in the COPY_ALL_SCENES field to 1
CopyModeBitmap.set_copy_all_scenes = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COPY_ALL_SCENES
  else
    self.value = self.COPY_ALL_SCENES
  end
end

--- @function CopyModeBitmap:unset_copy_all_scenes
--- Set the value of the bits in the COPY_ALL_SCENES field to 0
CopyModeBitmap.unset_copy_all_scenes = function(self)
  self.value = self.value & (~self.COPY_ALL_SCENES & self.BASE_MASK)
end


CopyModeBitmap.mask_methods = {
  is_copy_all_scenes_set = CopyModeBitmap.is_copy_all_scenes_set,
  set_copy_all_scenes = CopyModeBitmap.set_copy_all_scenes,
  unset_copy_all_scenes = CopyModeBitmap.unset_copy_all_scenes,
}

CopyModeBitmap.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(CopyModeBitmap, new_mt)

local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ScenesManagement.types.CopyModeBitmap")
if has_aliases then
  aliases:add_to_class(CopyModeBitmap)
end

return CopyModeBitmap


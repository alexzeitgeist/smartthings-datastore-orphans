-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local command_mt = {}
command_mt.__command_cache = {}
command_mt.__index = function(self, key)
  if command_mt.__command_cache[key] == nil then
    local req_loc = string.format("st.matter.generated.zap_clusters.ScenesManagement.server.commands.%s", key)
    local raw_def = require(req_loc)
    local cluster = rawget(self, "_cluster")
    command_mt.__command_cache[key] = raw_def:set_parent_cluster(cluster)
  end
  return command_mt.__command_cache[key]
end

--- @class st.matter.generated.zap_clusters.ScenesManagementServerCommands
---
--- @field public AddScene st.matter.generated.zap_clusters.ScenesManagement.AddScene
--- @field public ViewScene st.matter.generated.zap_clusters.ScenesManagement.ViewScene
--- @field public RemoveScene st.matter.generated.zap_clusters.ScenesManagement.RemoveScene
--- @field public RemoveAllScenes st.matter.generated.zap_clusters.ScenesManagement.RemoveAllScenes
--- @field public StoreScene st.matter.generated.zap_clusters.ScenesManagement.StoreScene
--- @field public RecallScene st.matter.generated.zap_clusters.ScenesManagement.RecallScene
--- @field public GetSceneMembership st.matter.generated.zap_clusters.ScenesManagement.GetSceneMembership
--- @field public CopyScene st.matter.generated.zap_clusters.ScenesManagement.CopyScene
local ScenesManagementServerCommands = {}

function ScenesManagementServerCommands:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ScenesManagementServerCommands, command_mt)

local status, aliases = pcall(require, "st.matter.clusters.aliases.ScenesManagement.server.commands")
if status then
  aliases:add_to_class(ScenesManagementServerCommands)
end

return ScenesManagementServerCommands


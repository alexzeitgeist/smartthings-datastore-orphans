-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local ScenesManagementServerAttributes = require "st.matter.generated.zap_clusters.ScenesManagement.server.attributes"
local ScenesManagementServerCommands = require "st.matter.generated.zap_clusters.ScenesManagement.server.commands"
local ScenesManagementClientCommands = require "st.matter.generated.zap_clusters.ScenesManagement.client.commands"
local ScenesManagementTypes = require "st.matter.generated.zap_clusters.ScenesManagement.types"

--- @class st.matter.generated.zap_clusters.ScenesManagement
--- @alias ScenesManagement
---
--- @field public ID number 0x0062 the ID of this cluster
--- @field public NAME string "ScenesManagement" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.ScenesManagementServerAttributes | st.matter.generated.zap_clusters.ScenesManagementClientAttributes
--- @field public commands st.matter.generated.zap_clusters.ScenesManagementServerCommands | st.matter.generated.zap_clusters.ScenesManagementClientCommands
--- @field public types st.matter.generated.zap_clusters.ScenesManagementTypes

local ScenesManagement = {}

ScenesManagement.ID = 0x0062
ScenesManagement.NAME = "ScenesManagement"
ScenesManagement.server = {}
ScenesManagement.client = {}
ScenesManagement.server.attributes = ScenesManagementServerAttributes:set_parent_cluster(ScenesManagement)
ScenesManagement.server.commands = ScenesManagementServerCommands:set_parent_cluster(ScenesManagement)
ScenesManagement.client.commands = ScenesManagementClientCommands:set_parent_cluster(ScenesManagement)
ScenesManagement.types = ScenesManagementTypes

--- Find an attribute by id
---
--- @param attr_id number
function ScenesManagement:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "LastConfiguredBy",
    [0x0001] = "SceneTableSize",
    [0x0002] = "FabricSceneInfo",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function ScenesManagement:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "AddScene",
    [0x0001] = "ViewScene",
    [0x0002] = "RemoveScene",
    [0x0003] = "RemoveAllScenes",
    [0x0004] = "StoreScene",
    [0x0005] = "RecallScene",
    [0x0006] = "GetSceneMembership",
    [0x0040] = "CopyScene",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function ScenesManagement:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x0000] = "AddSceneResponse",
    [0x0001] = "ViewSceneResponse",
    [0x0002] = "RemoveSceneResponse",
    [0x0003] = "RemoveAllScenesResponse",
    [0x0004] = "StoreSceneResponse",
    [0x0006] = "GetSceneMembershipResponse",
    [0x0040] = "CopySceneResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

-- Attribute Mapping
ScenesManagement.attribute_direction_map = {
  ["LastConfiguredBy"] = "server",
  ["SceneTableSize"] = "server",
  ["FabricSceneInfo"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ScenesManagement.server.attributes")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      ScenesManagement.attribute_direction_map[alias] = "server"
    end
  end
end

-- Command Mapping
ScenesManagement.command_direction_map = {
  ["AddScene"] = "server",
  ["ViewScene"] = "server",
  ["RemoveScene"] = "server",
  ["RemoveAllScenes"] = "server",
  ["StoreScene"] = "server",
  ["RecallScene"] = "server",
  ["GetSceneMembership"] = "server",
  ["CopyScene"] = "server",
  ["AddSceneResponse"] = "client",
  ["ViewSceneResponse"] = "client",
  ["RemoveSceneResponse"] = "client",
  ["RemoveAllScenesResponse"] = "client",
  ["StoreSceneResponse"] = "client",
  ["GetSceneMembershipResponse"] = "client",
  ["CopySceneResponse"] = "client",
}

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ScenesManagement.server.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      ScenesManagement.command_direction_map[alias] = "server"
    end
  end
end

do
  local has_aliases, aliases = pcall(require, "st.matter.clusters.aliases.ScenesManagement.client.commands")
  if has_aliases then
    for alias, _ in pairs(aliases) do
      ScenesManagement.command_direction_map[alias] = "client"
    end
  end
end

ScenesManagement.FeatureMap = ScenesManagement.types.Feature

function ScenesManagement.are_features_supported(feature, feature_map)
  if (ScenesManagement.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = ScenesManagement.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, ScenesManagement.NAME))
  end
  return ScenesManagement[direction].attributes[key]
end
ScenesManagement.attributes = {}
setmetatable(ScenesManagement.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = ScenesManagement.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, ScenesManagement.NAME))
  end
  return ScenesManagement[direction].commands[key]
end
ScenesManagement.commands = {}
setmetatable(ScenesManagement.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return ScenesManagement.server.events[key]
end
ScenesManagement.events = {}
setmetatable(ScenesManagement.events, event_helper_mt)

setmetatable(ScenesManagement, {__index = cluster_base})

return ScenesManagement

